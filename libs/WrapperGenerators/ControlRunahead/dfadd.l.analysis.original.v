//----------------------------------------------------------------------------//
// Generated by LegUp High-Level Synthesis Tool Version 4.0 (http://legup.org)
// Compiled: Tue Aug 18 06:53:46 2015
// University of Toronto
// For research and academic purposes only. Commercial use is prohibited.
// Please send bugs to: legup@eecg.toronto.edu
// Date: Wed Mar 16 07:44:54 2016
//----------------------------------------------------------------------------//

`define MEMORY_CONTROLLER_ADDR_SIZE 32
`define MEMORY_CONTROLLER_DATA_SIZE 64
// Number of RAM elements: 4
`define MEMORY_CONTROLLER_TAG_SIZE 9
// @a_input = internal unnamed_addr constant [46 x i64] [i64 9221120237041090560, i64 9218868437227405312, i64 4611686018427387904, i64 4611686018427387904, i64 4607182418800017408, i64 46071824188000174...
`define TAG_g_a_input `MEMORY_CONTROLLER_TAG_SIZE'd2
`define TAG_g_a_input_a {`TAG_g_a_input, 23'd0}
// @b_input = internal unnamed_addr constant [46 x i64] [i64 4607182418800017408, i64 4607182418800017408, i64 0, i64 4609434218613702656, i64 9221120237041090560, i64 9218868437227405312, i64 4611686018...
`define TAG_g_b_input `MEMORY_CONTROLLER_TAG_SIZE'd2
`define TAG_g_b_input_a {`TAG_g_b_input, 23'd512}
// @countLeadingZeros32.countLeadingZerosHigh = internal unnamed_addr constant [256 x i32] [i32 8, i32 7, i32 6, i32 6, i32 5, i32 5, i32 5, i32 5, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4,...
`define TAG_g_countLeadingZeros32countLeadingZerosHigh `MEMORY_CONTROLLER_TAG_SIZE'd3
`define TAG_g_countLeadingZeros32countLeadingZerosHigh_a {`TAG_g_countLeadingZeros32countLeadingZerosHigh, 23'd0}
// @z_output = internal unnamed_addr constant [46 x i64] [i64 9221120237041090560, i64 9218868437227405312, i64 4611686018427387904, i64 4615063718147915776, i64 9221120237041090560, i64 9218868437227405...
`define TAG_g_z_output `MEMORY_CONTROLLER_TAG_SIZE'd2
`define TAG_g_z_output_a {`TAG_g_z_output, 23'd1024}

// Turn off warning 'ignoring unsupported system task'
// altera message_off 10175

`timescale 1 ns / 1 ns
module top
	(
		clk,
		reset,
		start,
		finish,
		waitrequest,
		return_val
	);
input clk;
input reset;
input start;
output wire finish;
input waitrequest;
output wire [31:0] return_val;
wire memory_controller_waitrequest;
wire memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
wire memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
wire [1:0] memory_controller_size_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;

wire memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
wire memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
wire [1:0] memory_controller_size_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;

/* synthesis translate_off */
assign memory_controller_waitrequest = waitrequest;
/* synthesis translate_on */

memory_controller memory_controller_inst (
	.clk( clk ),
	.memory_controller_enable_a( memory_controller_enable_a ),
	.memory_controller_enable_b( memory_controller_enable_b ),
	.memory_controller_address_a( memory_controller_address_a ),
	.memory_controller_address_b( memory_controller_address_b ),
	.memory_controller_write_enable_a( memory_controller_write_enable_a ),
	.memory_controller_write_enable_b( memory_controller_write_enable_b ),
	.memory_controller_in_a( memory_controller_in_a ),
	.memory_controller_in_b( memory_controller_in_b ),
	.memory_controller_size_a( memory_controller_size_a ),
	.memory_controller_size_b( memory_controller_size_b ),
	.memory_controller_waitrequest( memory_controller_waitrequest ),
	.memory_controller_out_reg_a( memory_controller_out_a ),
	.memory_controller_out_reg_b( memory_controller_out_b )
);

main main_inst(
	.clk( clk ),
	.clk2x( clk2x ),
	.clk1x_follower( clk1x_follower ),
	.reset( reset ),
	.start( start ),
	.finish( finish ),
	.return_val( return_val ),
	.memory_controller_waitrequest(memory_controller_waitrequest),
	.memory_controller_enable_a(memory_controller_enable_a),
	.memory_controller_address_a(memory_controller_address_a),
	.memory_controller_write_enable_a(memory_controller_write_enable_a),
	.memory_controller_in_a(memory_controller_in_a),
	.memory_controller_size_a(memory_controller_size_a),
	.memory_controller_out_a(memory_controller_out_a),
	.memory_controller_enable_b(memory_controller_enable_b),
	.memory_controller_address_b(memory_controller_address_b),
	.memory_controller_write_enable_b(memory_controller_write_enable_b),
	.memory_controller_in_b(memory_controller_in_b),
	.memory_controller_size_b(memory_controller_size_b),
	.memory_controller_out_b(memory_controller_out_b)
);

endmodule

`timescale 1 ns / 1 ns
module memory_controller
(
	clk,
	memory_controller_address_a,
	memory_controller_address_b,
	memory_controller_enable_a,
	memory_controller_enable_b,
	memory_controller_write_enable_a,
	memory_controller_write_enable_b,
	memory_controller_in_a,
	memory_controller_in_b,
	memory_controller_size_a,
	memory_controller_size_b,
	memory_controller_waitrequest,
	memory_controller_out_reg_a,
	memory_controller_out_reg_b
);

parameter latency = 2;

parameter ram_latency = latency-1;

integer j;

input clk;
input memory_controller_waitrequest;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
input memory_controller_enable_a;
input memory_controller_write_enable_a;
input [64-1:0] memory_controller_in_a;
input [1:0] memory_controller_size_a;
output reg [64-1:0] memory_controller_out_reg_a;
reg [64-1:0] memory_controller_out_prev_a;
reg [64-1:0] memory_controller_out_a;

reg memory_controller_enable_reg_a;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
input memory_controller_enable_b;
input memory_controller_write_enable_b;
input [64-1:0] memory_controller_in_b;
input [1:0] memory_controller_size_b;
output reg [64-1:0] memory_controller_out_reg_b;
reg [64-1:0] memory_controller_out_prev_b;
reg [64-1:0] memory_controller_out_b;

reg memory_controller_enable_reg_b;

reg [7:0] rom_64_address_a;
reg [7:0] rom_64_address_b;
reg rom_64_write_enable_a;
reg rom_64_write_enable_b;
reg [63:0] rom_64_in_a;
reg [63:0] rom_64_in_b;
wire [63:0] rom_64_out_a;
wire [63:0] rom_64_out_b;

// @a_input = internal unnamed_addr constant [46 x i64] [i64 9221120237041090560, i64 9218868437227405312, i64 4611686018427387904, i64 4611686018427387904, i64 4607182418800017408, i64 46071824188000174...
rom_dual_port rom_64 (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( rom_64_address_a ),
	.address_b( rom_64_address_b ),
	.q_a( rom_64_out_a ),
	.q_b( rom_64_out_b)
);
defparam rom_64.width_a = 64;
defparam rom_64.width_b = 64;
defparam rom_64.widthad_a = 8;
defparam rom_64.widthad_b = 8;
defparam rom_64.numwords_a = 174;
defparam rom_64.numwords_b = 174;
defparam rom_64.latency = ram_latency;
defparam rom_64.init_file = "rom_64.mif";

reg [7:0] rom_32_address_a;
reg [7:0] rom_32_address_b;
reg rom_32_write_enable_a;
reg rom_32_write_enable_b;
reg [31:0] rom_32_in_a;
reg [31:0] rom_32_in_b;
wire [31:0] rom_32_out_a;
wire [31:0] rom_32_out_b;

// @countLeadingZeros32.countLeadingZerosHigh = internal unnamed_addr constant [256 x i32] [i32 8, i32 7, i32 6, i32 6, i32 5, i32 5, i32 5, i32 5, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4,...
rom_dual_port rom_32 (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( rom_32_address_a ),
	.address_b( rom_32_address_b ),
	.q_a( rom_32_out_a ),
	.q_b( rom_32_out_b)
);
defparam rom_32.width_a = 32;
defparam rom_32.width_b = 32;
defparam rom_32.widthad_a = 8;
defparam rom_32.widthad_b = 8;
defparam rom_32.numwords_a = 256;
defparam rom_32.numwords_b = 256;
defparam rom_32.latency = ram_latency;
defparam rom_32.init_file = "rom_32.mif";
wire [`MEMORY_CONTROLLER_TAG_SIZE-1:0] tag_a;
assign tag_a = memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:`MEMORY_CONTROLLER_ADDR_SIZE-`MEMORY_CONTROLLER_TAG_SIZE];
reg [2:0] prevAddr_a;
reg [1:0] prevSize_a;
reg [2:0] prevSize_a_and;

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
	prevAddr_a <= memory_controller_address_a[2:0];
	prevSize_a <= memory_controller_size_a;
end
wire [`MEMORY_CONTROLLER_TAG_SIZE-1:0] tag_b;
assign tag_b = memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:`MEMORY_CONTROLLER_ADDR_SIZE-`MEMORY_CONTROLLER_TAG_SIZE];
reg [2:0] prevAddr_b;
reg [1:0] prevSize_b;
reg [2:0] prevSize_b_and;

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
	prevAddr_b <= memory_controller_address_b[2:0];
	prevSize_b <= memory_controller_size_b;
end

reg [2:0] select_not_struct_a;

wire select_rom_64_a;
assign select_rom_64_a = (tag_a == 2);
reg [ram_latency:0] select_rom_64_reg_a;
wire [63:0] memory_controller_rom_64_out_a;
assign memory_controller_rom_64_out_a = {64{ select_rom_64_reg_a[ram_latency]}} & rom_64_out_a;

wire select_rom_32_a;
assign select_rom_32_a = (tag_a == 3);
reg [ram_latency:0] select_rom_32_reg_a;
wire [31:0] memory_controller_rom_32_out_a;
assign memory_controller_rom_32_out_a = {32{ select_rom_32_reg_a[ram_latency]}} & rom_32_out_a;

always @(*)
begin
	rom_64_address_a = memory_controller_address_a [8-1+3:3] & {8{select_rom_64_a}};
	rom_64_write_enable_a = memory_controller_write_enable_a & select_rom_64_a;
	rom_64_in_a [64-1:0] = memory_controller_in_a[64-1:0];

	rom_32_address_a = memory_controller_address_a [8-1+2:2] & {8{select_rom_32_a}};
	rom_32_write_enable_a = memory_controller_write_enable_a & select_rom_32_a;
	rom_32_in_a [32-1:0] = memory_controller_in_a[32-1:0];

end
always @(*)
begin
	select_not_struct_a [2:0] = 3'b0 | {3{select_rom_64_reg_a[ram_latency]}} | {2{select_rom_32_reg_a[ram_latency]}};
	if (prevAddr_a[2:0] & select_not_struct_a[2:0] != 0 && memory_controller_enable_a)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end

	prevSize_a_and[0] = prevSize_a[1] | prevSize_a[0];
	prevSize_a_and[1] = prevSize_a[1];
	prevSize_a_and[2] = prevSize_a[1] & prevSize_a[0];
	if ((prevAddr_a & prevSize_a_and) != 0 && memory_controller_enable_a)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end
	memory_controller_out_prev_a = memory_controller_out_reg_a & { 64{!memory_controller_enable_reg_a}};
	memory_controller_out_a = 1'b0 | memory_controller_out_prev_a | memory_controller_rom_64_out_a | memory_controller_rom_32_out_a;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
memory_controller_out_reg_a <= memory_controller_out_a;
memory_controller_enable_reg_a <= memory_controller_enable_a;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
for (j = 0; j < ram_latency; j=j+1)
begin
select_rom_64_reg_a[j+1] <= select_rom_64_reg_a[j];
select_rom_64_reg_a[j+1] <= select_rom_64_reg_a[j];
select_rom_64_reg_a[j+1] <= select_rom_64_reg_a[j];
select_rom_32_reg_a[j+1] <= select_rom_32_reg_a[j];
end
always @(*)
begin
select_rom_64_reg_a[0] <= select_rom_64_a;
select_rom_64_reg_a[0] <= select_rom_64_a;
select_rom_64_reg_a[0] <= select_rom_64_a;
select_rom_32_reg_a[0] <= select_rom_32_a;
end

reg [2:0] select_not_struct_b;

wire select_rom_64_b;
assign select_rom_64_b = (tag_b == 2);
reg [ram_latency:0] select_rom_64_reg_b;
wire [63:0] memory_controller_rom_64_out_b;
assign memory_controller_rom_64_out_b = {64{ select_rom_64_reg_b[ram_latency]}} & rom_64_out_b;

wire select_rom_32_b;
assign select_rom_32_b = (tag_b == 3);
reg [ram_latency:0] select_rom_32_reg_b;
wire [31:0] memory_controller_rom_32_out_b;
assign memory_controller_rom_32_out_b = {32{ select_rom_32_reg_b[ram_latency]}} & rom_32_out_b;

always @(*)
begin
	rom_64_address_b = memory_controller_address_b [8-1+3:3] & {8{select_rom_64_b}};
	rom_64_write_enable_b = memory_controller_write_enable_b & select_rom_64_b;
	rom_64_in_b [64-1:0] = memory_controller_in_b[64-1:0];

	rom_32_address_b = memory_controller_address_b [8-1+2:2] & {8{select_rom_32_b}};
	rom_32_write_enable_b = memory_controller_write_enable_b & select_rom_32_b;
	rom_32_in_b [32-1:0] = memory_controller_in_b[32-1:0];

end
always @(*)
begin
	select_not_struct_b [2:0] = 3'b0 | {3{select_rom_64_reg_b[ram_latency]}} | {2{select_rom_32_reg_b[ram_latency]}};
	if (prevAddr_b[2:0] & select_not_struct_b[2:0] != 0 && memory_controller_enable_b)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end

	prevSize_b_and[0] = prevSize_b[1] | prevSize_b[0];
	prevSize_b_and[1] = prevSize_b[1];
	prevSize_b_and[2] = prevSize_b[1] & prevSize_b[0];
	if ((prevAddr_b & prevSize_b_and) != 0 && memory_controller_enable_b)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end
	memory_controller_out_prev_b = memory_controller_out_reg_b & { 64{!memory_controller_enable_reg_b}};
	memory_controller_out_b = 1'b0 | memory_controller_out_prev_b | memory_controller_rom_64_out_b | memory_controller_rom_32_out_b;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
memory_controller_out_reg_b <= memory_controller_out_b;
memory_controller_enable_reg_b <= memory_controller_enable_b;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
for (j = 0; j < ram_latency; j=j+1)
begin
select_rom_64_reg_b[j+1] <= select_rom_64_reg_b[j];
select_rom_64_reg_b[j+1] <= select_rom_64_reg_b[j];
select_rom_64_reg_b[j+1] <= select_rom_64_reg_b[j];
select_rom_32_reg_b[j+1] <= select_rom_32_reg_b[j];
end
always @(*)
begin
select_rom_64_reg_b[0] <= select_rom_64_b;
select_rom_64_reg_b[0] <= select_rom_64_b;
select_rom_64_reg_b[0] <= select_rom_64_b;
select_rom_32_reg_b[0] <= select_rom_32_b;
end

endmodule 

`timescale 1 ns / 1 ns
module main
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	return_val
);

parameter [6:0] LEGUP_0 = 7'd0;
parameter [6:0] LEGUP_F_main_BB_BB1_1 = 7'd1;
parameter [6:0] LEGUP_F_main_BB_BB1_2 = 7'd2;
parameter [6:0] LEGUP_F_main_BB_BB1_3 = 7'd3;
parameter [6:0] LEGUP_F_main_BB_BB2_4 = 7'd4;
parameter [6:0] LEGUP_F_main_BB_BB3_5 = 7'd5;
parameter [6:0] LEGUP_F_main_BB_BB4_6 = 7'd6;
parameter [6:0] LEGUP_F_main_BB_BB5_7 = 7'd7;
parameter [6:0] LEGUP_F_main_BB_BB6_8 = 7'd8;
parameter [6:0] LEGUP_F_main_BB_BB7_9 = 7'd9;
parameter [6:0] LEGUP_F_main_BB_BB8_10 = 7'd10;
parameter [6:0] LEGUP_F_main_BB_BB9_11 = 7'd11;
parameter [6:0] LEGUP_F_main_BB_BB10_12 = 7'd12;
parameter [6:0] LEGUP_F_main_BB_BB11_13 = 7'd13;
parameter [6:0] LEGUP_F_main_BB_BB12_14 = 7'd14;
parameter [6:0] LEGUP_F_main_BB_BB13_15 = 7'd15;
parameter [6:0] LEGUP_F_main_BB_BB14_16 = 7'd16;
parameter [6:0] LEGUP_F_main_BB_BB15_17 = 7'd17;
parameter [6:0] LEGUP_F_main_BB_BB16_18 = 7'd18;
parameter [6:0] LEGUP_F_main_BB_BB17_19 = 7'd19;
parameter [6:0] LEGUP_F_main_BB_BB18_20 = 7'd20;
parameter [6:0] LEGUP_F_main_BB_BB19_21 = 7'd21;
parameter [6:0] LEGUP_F_main_BB_BB20_22 = 7'd22;
parameter [6:0] LEGUP_F_main_BB_BB21_23 = 7'd23;
parameter [6:0] LEGUP_F_main_BB_BB22_24 = 7'd24;
parameter [6:0] LEGUP_F_main_BB_BB23_25 = 7'd25;
parameter [6:0] LEGUP_F_main_BB_BB24_26 = 7'd26;
parameter [6:0] LEGUP_F_main_BB_BB24_27 = 7'd27;
parameter [6:0] LEGUP_F_main_BB_BB24_28 = 7'd28;
parameter [6:0] LEGUP_F_main_BB_BB25_29 = 7'd29;
parameter [6:0] LEGUP_F_main_BB_BB26_30 = 7'd30;
parameter [6:0] LEGUP_F_main_BB_BB27_31 = 7'd31;
parameter [6:0] LEGUP_F_main_BB_BB28_32 = 7'd32;
parameter [6:0] LEGUP_F_main_BB_BB29_33 = 7'd33;
parameter [6:0] LEGUP_F_main_BB_BB30_34 = 7'd34;
parameter [6:0] LEGUP_F_main_BB_BB31_35 = 7'd35;
parameter [6:0] LEGUP_F_main_BB_BB32_36 = 7'd36;
parameter [6:0] LEGUP_F_main_BB_BB33_37 = 7'd37;
parameter [6:0] LEGUP_F_main_BB_BB34_38 = 7'd38;
parameter [6:0] LEGUP_F_main_BB_BB35_39 = 7'd39;
parameter [6:0] LEGUP_F_main_BB_BB36_40 = 7'd40;
parameter [6:0] LEGUP_F_main_BB_BB37_41 = 7'd41;
parameter [6:0] LEGUP_F_main_BB_BB38_42 = 7'd42;
parameter [6:0] LEGUP_F_main_BB_BB39_43 = 7'd43;
parameter [6:0] LEGUP_F_main_BB_BB40_44 = 7'd44;
parameter [6:0] LEGUP_F_main_BB_BB41_45 = 7'd45;
parameter [6:0] LEGUP_F_main_BB_BB42_46 = 7'd46;
parameter [6:0] LEGUP_F_main_BB_BB43_47 = 7'd47;
parameter [6:0] LEGUP_F_main_BB_BB44_48 = 7'd48;
parameter [6:0] LEGUP_F_main_BB_BB45_49 = 7'd49;
parameter [6:0] LEGUP_F_main_BB_BB46_50 = 7'd50;
parameter [6:0] LEGUP_F_main_BB_BB47_51 = 7'd51;
parameter [6:0] LEGUP_F_main_BB_BB48_52 = 7'd52;
parameter [6:0] LEGUP_F_main_BB_BB49_53 = 7'd53;
parameter [6:0] LEGUP_F_main_BB_BB50_54 = 7'd54;
parameter [6:0] LEGUP_F_main_BB_BB51_55 = 7'd55;
parameter [6:0] LEGUP_F_main_BB_BB52_56 = 7'd56;
parameter [6:0] LEGUP_F_main_BB_BB53_57 = 7'd57;
parameter [6:0] LEGUP_F_main_BB_BB54_58 = 7'd58;
parameter [6:0] LEGUP_F_main_BB_BB55_59 = 7'd59;
parameter [6:0] LEGUP_F_main_BB_BB56_60 = 7'd60;
parameter [6:0] LEGUP_F_main_BB_BB57_61 = 7'd61;
parameter [6:0] LEGUP_F_main_BB_BB58_62 = 7'd62;
parameter [6:0] LEGUP_F_main_BB_BB59_63 = 7'd63;
parameter [6:0] LEGUP_F_main_BB_BB60_64 = 7'd64;
parameter [6:0] LEGUP_F_main_BB_BB61_65 = 7'd65;
parameter [6:0] LEGUP_F_main_BB_BB62_66 = 7'd66;
parameter [6:0] LEGUP_F_main_BB_BB63_67 = 7'd67;
parameter [6:0] LEGUP_F_main_BB_BB64_68 = 7'd68;
parameter [6:0] LEGUP_F_main_BB_BB65_69 = 7'd69;
parameter [6:0] LEGUP_F_main_BB_BB66_70 = 7'd70;
parameter [6:0] LEGUP_F_main_BB_BB67_71 = 7'd71;
parameter [6:0] LEGUP_F_main_BB_BB68_72 = 7'd72;
parameter [6:0] LEGUP_F_main_BB_BB68_73 = 7'd73;
parameter [6:0] LEGUP_F_main_BB_BB68_74 = 7'd74;
parameter [6:0] LEGUP_F_main_BB_BB69_75 = 7'd75;
parameter [6:0] LEGUP_F_main_BB_BB70_76 = 7'd76;
parameter [6:0] LEGUP_F_main_BB_BB71_77 = 7'd77;
parameter [6:0] LEGUP_F_main_BB_BB72_78 = 7'd78;
parameter [6:0] LEGUP_F_main_BB_BB73_79 = 7'd79;
parameter [6:0] LEGUP_F_main_BB_BB74_80 = 7'd80;
parameter [6:0] LEGUP_F_main_BB_BB75_81 = 7'd81;
parameter [6:0] LEGUP_F_main_BB_BB76_82 = 7'd82;
parameter [6:0] LEGUP_F_main_BB_BB77_83 = 7'd83;
parameter [6:0] LEGUP_F_main_BB_BB78_84 = 7'd84;
parameter [6:0] LEGUP_F_main_BB_BB79_85 = 7'd85;
parameter [6:0] LEGUP_F_main_BB_BB80_86 = 7'd86;
parameter [6:0] LEGUP_F_main_BB_BB81_87 = 7'd87;
parameter [6:0] LEGUP_F_main_BB_BB82_88 = 7'd88;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
output reg [31:0] return_val;
reg [6:0] cur_state;
reg [6:0] next_state;
reg [31:0] main_BB1_i01;
reg [31:0] main_BB1_i01_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_BB1_scevgep2;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_BB1_scevgep3;
reg [63:0] main_BB1_0;
reg [63:0] main_BB1_0_reg;
reg [63:0] main_BB1_1;
reg [63:0] main_BB1_1_reg;
reg [63:0] main_BB1_2;
reg [31:0] main_BB1_3;
reg [63:0] main_BB1_4;
reg [31:0] main_BB1_5;
reg  main_BB1_6;
reg [63:0] main_BB1_7;
reg [31:0] main_BB1_tri19ii;
reg [31:0] main_BB1_8;
reg [31:0] main_BB1_8_reg;
reg [63:0] main_BB1_9;
reg [31:0] main_BB1_tri18i1i;
reg [31:0] main_BB1_10;
reg [31:0] main_BB1_10_reg;
reg [31:0] main_BB1_11;
reg [31:0] main_BB1_11_reg;
reg [63:0] main_BB2_12;
reg [63:0] main_BB2_13;
reg [63:0] main_BB2_13_reg;
reg [63:0] main_BB2_14;
reg [63:0] main_BB2_15;
reg [63:0] main_BB2_15_reg;
reg  main_BB2_16;
reg  main_BB3_17;
reg  main_BB4_18;
reg  main_BB6_19;
reg [63:0] main_BB6_20;
reg [63:0] main_BB6_21;
reg [63:0] main_BB6_21_reg;
reg [31:0] main_BB6_22;
reg [31:0] main_BB6_expDiff0i9i;
reg [31:0] main_BB6_expDiff0i9i_reg;
reg  main_BB6_23;
reg  main_BB7_24;
reg [63:0] main_BB8_25;
reg [63:0] main_BB8_26;
reg [31:0] main_BB8_27;
reg [31:0] main_BB8_28;
reg [63:0] main_BB8_29;
reg [63:0] main_BB8_30;
reg  main_BB8_31;
reg [63:0] main_BB8_32;
reg [63:0] main_BB8_33;
reg  main_BB9_34;
reg [63:0] main_BB9_35;
reg  main_BB10_36;
reg  main_BB11_37;
reg  main_BB12_38;
reg  main_BB15_39;
reg [63:0] main_BB15_40;
reg [63:0] main_BB15_41;
reg [63:0] main_BB15_41_reg;
reg [31:0] main_BB15_42;
reg [31:0] main_BB15_expDiff1i10i;
reg [31:0] main_BB15_expDiff1i10i_reg;
reg [31:0] main_BB15_43;
reg [31:0] main_BB15_43_reg;
reg  main_BB15_44;
reg  main_BB16_45;
reg [63:0] main_BB17_46;
reg [63:0] main_BB17_47;
reg [31:0] main_BB17_48;
reg [63:0] main_BB17_49;
reg [63:0] main_BB17_50;
reg  main_BB17_51;
reg [63:0] main_BB17_52;
reg [63:0] main_BB17_53;
reg  main_BB18_54;
reg [63:0] main_BB18_55;
reg [63:0] main_BB20_56;
reg  main_BB20_57;
reg [63:0] main_BB23_58;
reg [63:0] main_BB23_59;
reg [63:0] main_BB24_60;
reg [63:0] main_BB24_60_reg;
reg [63:0] main_BB24_61;
reg [63:0] main_BB24_61_reg;
reg [31:0] main_BB24_zExp0i17i;
reg [31:0] main_BB24_zExp0i17i_reg;
reg [63:0] main_BB24_62;
reg [63:0] main_BB24_63;
reg [63:0] main_BB24_64;
reg  main_BB24_65;
reg  main_BB24_65_reg;
reg  main_BB24_notii;
reg [31:0] main_BB24_66;
reg [31:0] main_BB24_66_reg;
reg [31:0] main_BB24_zExp0ii;
reg [63:0] main_BB24_ii;
reg [63:0] main_BB24_ii_reg;
reg [31:0] main_BB25_zExp1ii;
reg [31:0] main_BB25_zExp1ii_reg;
reg [63:0] main_BB25_zSig0i18i;
reg [63:0] main_BB25_zSig0i18i_reg;
reg [31:0] main_BB25_67;
reg  main_BB25_68;
reg  main_BB26_69;
reg  main_BB27_70;
reg [63:0] main_BB28_71;
reg  main_BB28_72;
reg  main_BB30_73;
reg  main_BB31_74;
reg [31:0] main_BB32_75;
reg [63:0] main_BB32_76;
reg [63:0] main_BB32_77;
reg [31:0] main_BB32_78;
reg [63:0] main_BB32_79;
reg [63:0] main_BB32_80;
reg  main_BB32_81;
reg [63:0] main_BB32_82;
reg [63:0] main_BB32_83;
reg  main_BB33_84;
reg [63:0] main_BB33_85;
reg [63:0] main_BB34_z0iiii;
reg [63:0] main_BB34_z0iiii_reg;
reg [31:0] main_BB34_tr3iii;
reg [31:0] main_BB34_86;
reg  main_BB34_87;
reg [63:0] main_BB38_88;
reg [63:0] main_BB38_89;
reg [63:0] main_BB38_89_reg;
reg [63:0] main_BB38_90;
reg [63:0] main_BB38_91;
reg [63:0] main_BB38_91_reg;
reg  main_BB38_92;
reg  main_BB39_93;
reg [63:0] main_BB41_94;
reg  main_BB41_95;
reg [31:0] main_BB45_aExp0ii;
reg [31:0] main_BB45_aExp0ii_reg;
reg [31:0] main_BB45_bExp0ii;
reg [31:0] main_BB45_bExp0ii_reg;
reg  main_BB45_96;
reg  main_BB46_97;
reg  main_BB47_98;
reg  main_BB48_99;
reg  main_BB51_100;
reg [63:0] main_BB51_101;
reg [63:0] main_BB51_102;
reg [63:0] main_BB51_102_reg;
reg [31:0] main_BB51_103;
reg [31:0] main_BB51_expDiff0ii;
reg [31:0] main_BB51_expDiff0ii_reg;
reg [31:0] main_BB51_104;
reg [31:0] main_BB51_104_reg;
reg  main_BB51_105;
reg  main_BB52_106;
reg [63:0] main_BB53_107;
reg [63:0] main_BB53_108;
reg [31:0] main_BB53_109;
reg [63:0] main_BB53_110;
reg [63:0] main_BB53_111;
reg  main_BB53_112;
reg [63:0] main_BB53_113;
reg [63:0] main_BB53_114;
reg  main_BB54_115;
reg [63:0] main_BB54_116;
reg [63:0] main_BB55_z0i2ii;
reg [63:0] main_BB55_z0i2ii_reg;
reg [63:0] main_BB55_117;
reg [63:0] main_BB56_118;
reg [63:0] main_BB56_118_reg;
reg [63:0] main_BB56_119;
reg [63:0] main_BB56_119_reg;
reg [31:0] main_BB56_bExp1ii;
reg [31:0] main_BB56_bExp1ii_reg;
reg [63:0] main_BB56_120;
reg  main_BB57_121;
reg  main_BB58_122;
reg  main_BB60_123;
reg [63:0] main_BB60_124;
reg [63:0] main_BB60_125;
reg [63:0] main_BB60_125_reg;
reg [31:0] main_BB60_126;
reg [31:0] main_BB60_expDiff1ii;
reg [31:0] main_BB60_expDiff1ii_reg;
reg  main_BB60_127;
reg  main_BB61_128;
reg [63:0] main_BB62_129;
reg [63:0] main_BB62_130;
reg [31:0] main_BB62_131;
reg [31:0] main_BB62_132;
reg [63:0] main_BB62_133;
reg [63:0] main_BB62_134;
reg  main_BB62_135;
reg [63:0] main_BB62_136;
reg [63:0] main_BB62_137;
reg  main_BB63_138;
reg [63:0] main_BB63_139;
reg [63:0] main_BB64_z0iii;
reg [63:0] main_BB64_z0iii_reg;
reg [63:0] main_BB64_140;
reg [63:0] main_BB65_141;
reg [63:0] main_BB65_141_reg;
reg [63:0] main_BB65_142;
reg [63:0] main_BB65_142_reg;
reg [31:0] main_BB65_aExp1ii;
reg [31:0] main_BB65_aExp1ii_reg;
reg [63:0] main_BB65_143;
reg [31:0] main_BB66_zExp0ii;
reg [31:0] main_BB66_zExp0ii_reg;
reg [63:0] main_BB66_zSig0ii;
reg [63:0] main_BB66_zSig0ii_reg;
reg [31:0] main_BB66_144;
reg [31:0] main_BB66_144_reg;
reg  main_BB66_145;
reg  main_BB66_145_reg;
reg [63:0] main_BB66_146;
reg [63:0] main_BB66_asinkiiii;
reg [31:0] main_BB66_extracttiiii;
reg  main_BB66_147;
reg [31:0] main_BB66_148;
reg [31:0] main_BB66_aiiiii;
reg [31:0] main_BB66_aiiiii_reg;
reg [31:0] main_BB66_iiiii;
reg [31:0] main_BB66_iiiii_reg;
reg  main_BB66_149;
reg [31:0] main_BB67_150;
reg [31:0] main_BB67_151;
reg [31:0] main_BB68_1iiiii;
reg [31:0] main_BB68_1iiiii_reg;
reg [31:0] main_BB68_shiftCount1iiiii;
reg [31:0] main_BB68_shiftCount1iiiii_reg;
reg [31:0] main_BB68_152;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_BB68_153;
reg [31:0] main_BB68_154;
reg [31:0] main_BB68_155;
reg [31:0] main_BB68_156;
reg [31:0] main_BB68_156_reg;
reg [31:0] main_BB68_157;
reg [31:0] main_BB68_158;
reg [31:0] main_BB68_158_reg;
reg [63:0] main_BB68_159;
reg [63:0] main_BB68_160;
reg [63:0] main_BB68_160_reg;
reg [31:0] main_BB68_161;
reg  main_BB68_162;
reg  main_BB69_163;
reg  main_BB70_164;
reg [63:0] main_BB71_165;
reg  main_BB71_166;
reg  main_BB73_167;
reg  main_BB74_168;
reg [31:0] main_BB75_169;
reg [63:0] main_BB75_170;
reg [63:0] main_BB75_171;
reg [31:0] main_BB75_172;
reg [63:0] main_BB75_173;
reg [63:0] main_BB75_174;
reg  main_BB75_175;
reg [63:0] main_BB75_176;
reg [63:0] main_BB75_177;
reg  main_BB76_178;
reg [63:0] main_BB76_179;
reg [63:0] main_BB77_z0iiiii;
reg [63:0] main_BB77_z0iiiii_reg;
reg [31:0] main_BB77_tr3iiii;
reg [31:0] main_BB77_180;
reg  main_BB77_181;
reg [31:0] main_BB81_182;
reg  main_BB81_exitcond1;


always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_main_BB_BB1_1;
LEGUP_F_main_BB_BB10_12:
	if ((main_BB10_36 == 1'd1))
		next_state = LEGUP_F_main_BB_BB11_13;
	else if ((main_BB10_36 == 1'd0))
		next_state = LEGUP_F_main_BB_BB19_21;
LEGUP_F_main_BB_BB11_13:
	if ((main_BB11_37 == 1'd1))
		next_state = LEGUP_F_main_BB_BB12_14;
	else if ((main_BB11_37 == 1'd0))
		next_state = LEGUP_F_main_BB_BB15_17;
LEGUP_F_main_BB_BB12_14:
	if ((main_BB12_38 == 1'd1))
		next_state = LEGUP_F_main_BB_BB14_16;
	else if ((main_BB12_38 == 1'd0))
		next_state = LEGUP_F_main_BB_BB13_15;
LEGUP_F_main_BB_BB13_15:
		next_state = LEGUP_F_main_BB_BB81_87;
LEGUP_F_main_BB_BB14_16:
		next_state = LEGUP_F_main_BB_BB81_87;
LEGUP_F_main_BB_BB15_17:
	if ((main_BB15_44 == 1'd1))
		next_state = LEGUP_F_main_BB_BB24_26;
	else if ((main_BB15_44 == 1'd0))
		next_state = LEGUP_F_main_BB_BB16_18;
LEGUP_F_main_BB_BB16_18:
	if ((main_BB16_45 == 1'd1))
		next_state = LEGUP_F_main_BB_BB17_19;
	else if ((main_BB16_45 == 1'd0))
		next_state = LEGUP_F_main_BB_BB18_20;
LEGUP_F_main_BB_BB17_19:
		next_state = LEGUP_F_main_BB_BB24_26;
LEGUP_F_main_BB_BB18_20:
		next_state = LEGUP_F_main_BB_BB24_26;
LEGUP_F_main_BB_BB19_21:
	if ((main_BB1_8_reg == 32'd2047))
		next_state = LEGUP_F_main_BB_BB20_22;
	else if ((main_BB1_8_reg == 32'd0))
		next_state = LEGUP_F_main_BB_BB22_24;
	else if ((main_BB1_8_reg != 32'd2047) && (main_BB1_8_reg != 32'd0))
		next_state = LEGUP_F_main_BB_BB23_25;
LEGUP_F_main_BB_BB1_1:
		next_state = LEGUP_F_main_BB_BB1_2;
LEGUP_F_main_BB_BB1_2:
		next_state = LEGUP_F_main_BB_BB1_3;
LEGUP_F_main_BB_BB1_3:
	if ((main_BB1_6 == 1'd1))
		next_state = LEGUP_F_main_BB_BB2_4;
	else if ((main_BB1_6 == 1'd0))
		next_state = LEGUP_F_main_BB_BB38_42;
LEGUP_F_main_BB_BB20_22:
	if ((main_BB20_57 == 1'd1))
		next_state = LEGUP_F_main_BB_BB81_87;
	else if ((main_BB20_57 == 1'd0))
		next_state = LEGUP_F_main_BB_BB21_23;
LEGUP_F_main_BB_BB21_23:
		next_state = LEGUP_F_main_BB_BB81_87;
LEGUP_F_main_BB_BB22_24:
		next_state = LEGUP_F_main_BB_BB81_87;
LEGUP_F_main_BB_BB23_25:
		next_state = LEGUP_F_main_BB_BB25_29;
LEGUP_F_main_BB_BB24_26:
		next_state = LEGUP_F_main_BB_BB24_27;
LEGUP_F_main_BB_BB24_27:
		next_state = LEGUP_F_main_BB_BB24_28;
LEGUP_F_main_BB_BB24_28:
		next_state = LEGUP_F_main_BB_BB25_29;
LEGUP_F_main_BB_BB25_29:
	if ((main_BB25_68 == 1'd1))
		next_state = LEGUP_F_main_BB_BB26_30;
	else if ((main_BB25_68 == 1'd0))
		next_state = LEGUP_F_main_BB_BB36_40;
LEGUP_F_main_BB_BB26_30:
	if ((main_BB26_69 == 1'd1))
		next_state = LEGUP_F_main_BB_BB29_33;
	else if ((main_BB26_69 == 1'd0))
		next_state = LEGUP_F_main_BB_BB27_31;
LEGUP_F_main_BB_BB27_31:
	if ((main_BB27_70 == 1'd1))
		next_state = LEGUP_F_main_BB_BB28_32;
	else if ((main_BB27_70 == 1'd0))
		next_state = LEGUP_F_main_BB_BB30_34;
LEGUP_F_main_BB_BB28_32:
	if ((main_BB28_72 == 1'd1))
		next_state = LEGUP_F_main_BB_BB29_33;
	else if ((main_BB28_72 == 1'd0))
		next_state = LEGUP_F_main_BB_BB36_40;
LEGUP_F_main_BB_BB29_33:
		next_state = LEGUP_F_main_BB_BB81_87;
LEGUP_F_main_BB_BB2_4:
	if ((main_BB2_16 == 1'd1))
		next_state = LEGUP_F_main_BB_BB3_5;
	else if ((main_BB2_16 == 1'd0))
		next_state = LEGUP_F_main_BB_BB10_12;
LEGUP_F_main_BB_BB30_34:
	if ((main_BB30_73 == 1'd1))
		next_state = LEGUP_F_main_BB_BB31_35;
	else if ((main_BB30_73 == 1'd0))
		next_state = LEGUP_F_main_BB_BB36_40;
LEGUP_F_main_BB_BB31_35:
	if ((main_BB31_74 == 1'd1))
		next_state = LEGUP_F_main_BB_BB32_36;
	else if ((main_BB31_74 == 1'd0))
		next_state = LEGUP_F_main_BB_BB33_37;
LEGUP_F_main_BB_BB32_36:
		next_state = LEGUP_F_main_BB_BB34_38;
LEGUP_F_main_BB_BB33_37:
		next_state = LEGUP_F_main_BB_BB34_38;
LEGUP_F_main_BB_BB34_38:
	if ((main_BB34_87 == 1'd1))
		next_state = LEGUP_F_main_BB_BB37_41;
	else if ((main_BB34_87 == 1'd0))
		next_state = LEGUP_F_main_BB_BB35_39;
LEGUP_F_main_BB_BB35_39:
		next_state = LEGUP_F_main_BB_BB36_40;
LEGUP_F_main_BB_BB36_40:
		next_state = LEGUP_F_main_BB_BB37_41;
LEGUP_F_main_BB_BB37_41:
		next_state = LEGUP_F_main_BB_BB81_87;
LEGUP_F_main_BB_BB38_42:
	if ((main_BB38_92 == 1'd1))
		next_state = LEGUP_F_main_BB_BB57_61;
	else if ((main_BB38_92 == 1'd0))
		next_state = LEGUP_F_main_BB_BB39_43;
LEGUP_F_main_BB_BB39_43:
	if ((main_BB39_93 == 1'd1))
		next_state = LEGUP_F_main_BB_BB47_51;
	else if ((main_BB39_93 == 1'd0))
		next_state = LEGUP_F_main_BB_BB40_44;
LEGUP_F_main_BB_BB3_5:
	if ((main_BB3_17 == 1'd1))
		next_state = LEGUP_F_main_BB_BB4_6;
	else if ((main_BB3_17 == 1'd0))
		next_state = LEGUP_F_main_BB_BB6_8;
LEGUP_F_main_BB_BB40_44:
	if ((main_BB1_8_reg == 32'd2047))
		next_state = LEGUP_F_main_BB_BB41_45;
	else if ((main_BB1_8_reg == 32'd0))
		next_state = LEGUP_F_main_BB_BB44_48;
	else if ((main_BB1_8_reg != 32'd2047) && (main_BB1_8_reg != 32'd0))
		next_state = LEGUP_F_main_BB_BB45_49;
LEGUP_F_main_BB_BB41_45:
	if ((main_BB41_95 == 1'd1))
		next_state = LEGUP_F_main_BB_BB43_47;
	else if ((main_BB41_95 == 1'd0))
		next_state = LEGUP_F_main_BB_BB42_46;
LEGUP_F_main_BB_BB42_46:
		next_state = LEGUP_F_main_BB_BB81_87;
LEGUP_F_main_BB_BB43_47:
		next_state = LEGUP_F_main_BB_BB81_87;
LEGUP_F_main_BB_BB44_48:
		next_state = LEGUP_F_main_BB_BB45_49;
LEGUP_F_main_BB_BB45_49:
	if ((main_BB45_96 == 1'd1))
		next_state = LEGUP_F_main_BB_BB65_69;
	else if ((main_BB45_96 == 1'd0))
		next_state = LEGUP_F_main_BB_BB46_50;
LEGUP_F_main_BB_BB46_50:
	if ((main_BB46_97 == 1'd1))
		next_state = LEGUP_F_main_BB_BB56_60;
	else if ((main_BB46_97 == 1'd0))
		next_state = LEGUP_F_main_BB_BB81_87;
LEGUP_F_main_BB_BB47_51:
	if ((main_BB47_98 == 1'd1))
		next_state = LEGUP_F_main_BB_BB48_52;
	else if ((main_BB47_98 == 1'd0))
		next_state = LEGUP_F_main_BB_BB51_55;
LEGUP_F_main_BB_BB48_52:
	if ((main_BB48_99 == 1'd1))
		next_state = LEGUP_F_main_BB_BB50_54;
	else if ((main_BB48_99 == 1'd0))
		next_state = LEGUP_F_main_BB_BB49_53;
LEGUP_F_main_BB_BB49_53:
		next_state = LEGUP_F_main_BB_BB81_87;
LEGUP_F_main_BB_BB4_6:
	if ((main_BB4_18 == 1'd1))
		next_state = LEGUP_F_main_BB_BB81_87;
	else if ((main_BB4_18 == 1'd0))
		next_state = LEGUP_F_main_BB_BB5_7;
LEGUP_F_main_BB_BB50_54:
		next_state = LEGUP_F_main_BB_BB81_87;
LEGUP_F_main_BB_BB51_55:
	if ((main_BB51_105 == 1'd1))
		next_state = LEGUP_F_main_BB_BB55_59;
	else if ((main_BB51_105 == 1'd0))
		next_state = LEGUP_F_main_BB_BB52_56;
LEGUP_F_main_BB_BB52_56:
	if ((main_BB52_106 == 1'd1))
		next_state = LEGUP_F_main_BB_BB53_57;
	else if ((main_BB52_106 == 1'd0))
		next_state = LEGUP_F_main_BB_BB54_58;
LEGUP_F_main_BB_BB53_57:
		next_state = LEGUP_F_main_BB_BB55_59;
LEGUP_F_main_BB_BB54_58:
		next_state = LEGUP_F_main_BB_BB55_59;
LEGUP_F_main_BB_BB55_59:
		next_state = LEGUP_F_main_BB_BB56_60;
LEGUP_F_main_BB_BB56_60:
		next_state = LEGUP_F_main_BB_BB66_70;
LEGUP_F_main_BB_BB57_61:
	if ((main_BB57_121 == 1'd1))
		next_state = LEGUP_F_main_BB_BB58_62;
	else if ((main_BB57_121 == 1'd0))
		next_state = LEGUP_F_main_BB_BB60_64;
LEGUP_F_main_BB_BB58_62:
	if ((main_BB58_122 == 1'd1))
		next_state = LEGUP_F_main_BB_BB81_87;
	else if ((main_BB58_122 == 1'd0))
		next_state = LEGUP_F_main_BB_BB59_63;
LEGUP_F_main_BB_BB59_63:
		next_state = LEGUP_F_main_BB_BB81_87;
LEGUP_F_main_BB_BB5_7:
		next_state = LEGUP_F_main_BB_BB81_87;
LEGUP_F_main_BB_BB60_64:
	if ((main_BB60_127 == 1'd1))
		next_state = LEGUP_F_main_BB_BB64_68;
	else if ((main_BB60_127 == 1'd0))
		next_state = LEGUP_F_main_BB_BB61_65;
LEGUP_F_main_BB_BB61_65:
	if ((main_BB61_128 == 1'd1))
		next_state = LEGUP_F_main_BB_BB62_66;
	else if ((main_BB61_128 == 1'd0))
		next_state = LEGUP_F_main_BB_BB63_67;
LEGUP_F_main_BB_BB62_66:
		next_state = LEGUP_F_main_BB_BB64_68;
LEGUP_F_main_BB_BB63_67:
		next_state = LEGUP_F_main_BB_BB64_68;
LEGUP_F_main_BB_BB64_68:
		next_state = LEGUP_F_main_BB_BB65_69;
LEGUP_F_main_BB_BB65_69:
		next_state = LEGUP_F_main_BB_BB66_70;
LEGUP_F_main_BB_BB66_70:
	if ((main_BB66_149 == 1'd1))
		next_state = LEGUP_F_main_BB_BB67_71;
	else if ((main_BB66_149 == 1'd0))
		next_state = LEGUP_F_main_BB_BB68_72;
LEGUP_F_main_BB_BB67_71:
		next_state = LEGUP_F_main_BB_BB68_72;
LEGUP_F_main_BB_BB68_72:
		next_state = LEGUP_F_main_BB_BB68_73;
LEGUP_F_main_BB_BB68_73:
		next_state = LEGUP_F_main_BB_BB68_74;
LEGUP_F_main_BB_BB68_74:
	if ((main_BB68_162 == 1'd1))
		next_state = LEGUP_F_main_BB_BB69_75;
	else if ((main_BB68_162 == 1'd0))
		next_state = LEGUP_F_main_BB_BB79_85;
LEGUP_F_main_BB_BB69_75:
	if ((main_BB69_163 == 1'd1))
		next_state = LEGUP_F_main_BB_BB72_78;
	else if ((main_BB69_163 == 1'd0))
		next_state = LEGUP_F_main_BB_BB70_76;
LEGUP_F_main_BB_BB6_8:
	if ((main_BB6_23 == 1'd1))
		next_state = LEGUP_F_main_BB_BB24_26;
	else if ((main_BB6_23 == 1'd0))
		next_state = LEGUP_F_main_BB_BB7_9;
LEGUP_F_main_BB_BB70_76:
	if ((main_BB70_164 == 1'd1))
		next_state = LEGUP_F_main_BB_BB71_77;
	else if ((main_BB70_164 == 1'd0))
		next_state = LEGUP_F_main_BB_BB73_79;
LEGUP_F_main_BB_BB71_77:
	if ((main_BB71_166 == 1'd1))
		next_state = LEGUP_F_main_BB_BB72_78;
	else if ((main_BB71_166 == 1'd0))
		next_state = LEGUP_F_main_BB_BB79_85;
LEGUP_F_main_BB_BB72_78:
		next_state = LEGUP_F_main_BB_BB81_87;
LEGUP_F_main_BB_BB73_79:
	if ((main_BB73_167 == 1'd1))
		next_state = LEGUP_F_main_BB_BB74_80;
	else if ((main_BB73_167 == 1'd0))
		next_state = LEGUP_F_main_BB_BB79_85;
LEGUP_F_main_BB_BB74_80:
	if ((main_BB74_168 == 1'd1))
		next_state = LEGUP_F_main_BB_BB75_81;
	else if ((main_BB74_168 == 1'd0))
		next_state = LEGUP_F_main_BB_BB76_82;
LEGUP_F_main_BB_BB75_81:
		next_state = LEGUP_F_main_BB_BB77_83;
LEGUP_F_main_BB_BB76_82:
		next_state = LEGUP_F_main_BB_BB77_83;
LEGUP_F_main_BB_BB77_83:
	if ((main_BB77_181 == 1'd1))
		next_state = LEGUP_F_main_BB_BB80_86;
	else if ((main_BB77_181 == 1'd0))
		next_state = LEGUP_F_main_BB_BB78_84;
LEGUP_F_main_BB_BB78_84:
		next_state = LEGUP_F_main_BB_BB79_85;
LEGUP_F_main_BB_BB79_85:
		next_state = LEGUP_F_main_BB_BB80_86;
LEGUP_F_main_BB_BB7_9:
	if ((main_BB7_24 == 1'd1))
		next_state = LEGUP_F_main_BB_BB8_10;
	else if ((main_BB7_24 == 1'd0))
		next_state = LEGUP_F_main_BB_BB9_11;
LEGUP_F_main_BB_BB80_86:
		next_state = LEGUP_F_main_BB_BB81_87;
LEGUP_F_main_BB_BB81_87:
	if ((main_BB81_exitcond1 == 1'd1))
		next_state = LEGUP_F_main_BB_BB82_88;
	else if ((main_BB81_exitcond1 == 1'd0))
		next_state = LEGUP_F_main_BB_BB1_1;
LEGUP_F_main_BB_BB82_88:
		next_state = LEGUP_0;
LEGUP_F_main_BB_BB8_10:
		next_state = LEGUP_F_main_BB_BB24_26;
LEGUP_F_main_BB_BB9_11:
		next_state = LEGUP_F_main_BB_BB24_26;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* main: %BB1*/
	/*   %i.01 = phi i32 [ 0, %BB ], [ %182, %BB81 ]*/
	if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1))) begin
		main_BB1_i01 = 32'd0;
	end
	/* main: %BB1*/
	/*   %i.01 = phi i32 [ 0, %BB ], [ %182, %BB81 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_BB81_87) & (memory_controller_waitrequest == 1'd0)) & (main_BB81_exitcond1 == 1'd0))) */ begin
		main_BB1_i01 = main_BB81_182;
	end
end
always @(posedge clk) begin
	/* main: %BB1*/
	/*   %i.01 = phi i32 [ 0, %BB ], [ %182, %BB81 ]*/
	if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1))) begin
		main_BB1_i01_reg <= main_BB1_i01;
		if (start == 1'b0 && ^(main_BB1_i01) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_BB1_i01_reg"); $finish; end
	end
	/* main: %BB1*/
	/*   %i.01 = phi i32 [ 0, %BB ], [ %182, %BB81 ]*/
	if ((((cur_state == LEGUP_F_main_BB_BB81_87) & (memory_controller_waitrequest == 1'd0)) & (main_BB81_exitcond1 == 1'd0))) begin
		main_BB1_i01_reg <= main_BB1_i01;
		if (start == 1'b0 && ^(main_BB1_i01) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_BB1_i01_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %BB1*/
	/*   %scevgep2 = getelementptr [46 x i64]* @b_input, i32 0, i32 %i.01*/
		main_BB1_scevgep2 = (`TAG_g_b_input_a | (8 * main_BB1_i01_reg));
end
always @(*) begin
	/* main: %BB1*/
	/*   %scevgep3 = getelementptr [46 x i64]* @a_input, i32 0, i32 %i.01*/
		main_BB1_scevgep3 = (`TAG_g_a_input_a | (8 * main_BB1_i01_reg));
end
always @(*) begin
	/* main: %BB1*/
	/*   %0 = load i64* %scevgep3, align 8, !tbaa !1*/
		main_BB1_0 = memory_controller_out_a[63:0];
end
always @(posedge clk) begin
	/* main: %BB1*/
	/*   %0 = load i64* %scevgep3, align 8, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_BB1_3)) begin
		main_BB1_0_reg <= main_BB1_0;
		if (start == 1'b0 && ^(main_BB1_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_BB1_0_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %BB1*/
	/*   %1 = load i64* %scevgep2, align 8, !tbaa !1*/
		main_BB1_1 = memory_controller_out_b[63:0];
end
always @(posedge clk) begin
	/* main: %BB1*/
	/*   %1 = load i64* %scevgep2, align 8, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_BB1_3)) begin
		main_BB1_1_reg <= main_BB1_1;
		if (start == 1'b0 && ^(main_BB1_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_BB1_1_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %BB1*/
	/*   %2 = lshr i64 %0, 63*/
		main_BB1_2 = (main_BB1_0 >>> (64'd63 % 64'd64));
end
always @(*) begin
	/* main: %BB1*/
	/*   %3 = trunc i64 %2 to i32*/
		main_BB1_3 = main_BB1_2[31:0];
end
always @(*) begin
	/* main: %BB1*/
	/*   %4 = lshr i64 %1, 63*/
		main_BB1_4 = (main_BB1_1 >>> (64'd63 % 64'd64));
end
always @(*) begin
	/* main: %BB1*/
	/*   %5 = trunc i64 %4 to i32*/
		main_BB1_5 = main_BB1_4[31:0];
end
always @(*) begin
	/* main: %BB1*/
	/*   %6 = icmp eq i32 %3, %5*/
		main_BB1_6 = (main_BB1_3 == main_BB1_5);
end
always @(*) begin
	/* main: %BB1*/
	/*   %7 = lshr i64 %0, 52*/
		main_BB1_7 = (main_BB1_0 >>> (64'd52 % 64'd64));
end
always @(*) begin
	/* main: %BB1*/
	/*   %.tr.i19.i.i = trunc i64 %7 to i32*/
		main_BB1_tri19ii = main_BB1_7[31:0];
end
always @(*) begin
	/* main: %BB1*/
	/*   %8 = and i32 %.tr.i19.i.i, 2047*/
		main_BB1_8 = (main_BB1_tri19ii & 32'd2047);
end
always @(posedge clk) begin
	/* main: %BB1*/
	/*   %8 = and i32 %.tr.i19.i.i, 2047*/
	if ((cur_state == LEGUP_F_main_BB_BB1_3)) begin
		main_BB1_8_reg <= main_BB1_8;
		if (start == 1'b0 && ^(main_BB1_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_BB1_8_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %BB1*/
	/*   %9 = lshr i64 %1, 52*/
		main_BB1_9 = (main_BB1_1 >>> (64'd52 % 64'd64));
end
always @(*) begin
	/* main: %BB1*/
	/*   %.tr.i18.i1.i = trunc i64 %9 to i32*/
		main_BB1_tri18i1i = main_BB1_9[31:0];
end
always @(*) begin
	/* main: %BB1*/
	/*   %10 = and i32 %.tr.i18.i1.i, 2047*/
		main_BB1_10 = (main_BB1_tri18i1i & 32'd2047);
end
always @(posedge clk) begin
	/* main: %BB1*/
	/*   %10 = and i32 %.tr.i18.i1.i, 2047*/
	if ((cur_state == LEGUP_F_main_BB_BB1_3)) begin
		main_BB1_10_reg <= main_BB1_10;
		if (start == 1'b0 && ^(main_BB1_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_BB1_10_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %BB1*/
	/*   %11 = sub nsw i32 %8, %10*/
		main_BB1_11 = (main_BB1_8 - main_BB1_10);
end
always @(posedge clk) begin
	/* main: %BB1*/
	/*   %11 = sub nsw i32 %8, %10*/
	if ((cur_state == LEGUP_F_main_BB_BB1_3)) begin
		main_BB1_11_reg <= main_BB1_11;
		if (start == 1'b0 && ^(main_BB1_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_BB1_11_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %BB2*/
	/*   %12 = shl i64 %0, 9*/
		main_BB2_12 = (main_BB1_0_reg <<< (64'd9 % 64'd64));
end
always @(*) begin
	/* main: %BB2*/
	/*   %13 = and i64 %12, 2305843009213693440*/
		main_BB2_13 = (main_BB2_12 & 64'd2305843009213693440);
end
always @(posedge clk) begin
	/* main: %BB2*/
	/*   %13 = and i64 %12, 2305843009213693440*/
	if ((cur_state == LEGUP_F_main_BB_BB2_4)) begin
		main_BB2_13_reg <= main_BB2_13;
		if (start == 1'b0 && ^(main_BB2_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_BB2_13_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %BB2*/
	/*   %14 = shl i64 %1, 9*/
		main_BB2_14 = (main_BB1_1_reg <<< (64'd9 % 64'd64));
end
always @(*) begin
	/* main: %BB2*/
	/*   %15 = and i64 %14, 2305843009213693440*/
		main_BB2_15 = (main_BB2_14 & 64'd2305843009213693440);
end
always @(posedge clk) begin
	/* main: %BB2*/
	/*   %15 = and i64 %14, 2305843009213693440*/
	if ((cur_state == LEGUP_F_main_BB_BB2_4)) begin
		main_BB2_15_reg <= main_BB2_15;
		if (start == 1'b0 && ^(main_BB2_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_BB2_15_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %BB2*/
	/*   %16 = icmp sgt i32 %11, 0*/
		main_BB2_16 = ($signed(main_BB1_11_reg) > $signed(32'd0));
end
always @(*) begin
	/* main: %BB3*/
	/*   %17 = icmp eq i32 %8, 2047*/
		main_BB3_17 = (main_BB1_8_reg == 32'd2047);
end
always @(*) begin
	/* main: %BB4*/
	/*   %18 = icmp eq i64 %13, 0*/
		main_BB4_18 = (main_BB2_13_reg == 64'd0);
end
always @(*) begin
	/* main: %BB6*/
	/*   %19 = icmp eq i32 %10, 0*/
		main_BB6_19 = (main_BB1_10_reg == 32'd0);
end
always @(*) begin
	/* main: %BB6*/
	/*   %20 = or i64 %15, 2305843009213693952*/
		main_BB6_20 = (main_BB2_15_reg | 64'd2305843009213693952);
end
always @(*) begin
	/* main: %BB6*/
	/*   %21 = select i1 %19, i64 %15, i64 %20*/
		main_BB6_21 = (main_BB6_19 ? main_BB2_15_reg : main_BB6_20);
end
always @(posedge clk) begin
	/* main: %BB6*/
	/*   %21 = select i1 %19, i64 %15, i64 %20*/
	if ((cur_state == LEGUP_F_main_BB_BB6_8)) begin
		main_BB6_21_reg <= main_BB6_21;
		if (start == 1'b0 && ^(main_BB6_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_BB6_21_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %BB6*/
	/*   %22 = sext i1 %19 to i32*/
		main_BB6_22 = $signed(main_BB6_19);
end
always @(*) begin
	/* main: %BB6*/
	/*   %expDiff.0.i9.i = add nsw i32 %22, %11*/
		main_BB6_expDiff0i9i = (main_BB6_22 + main_BB1_11_reg);
end
always @(posedge clk) begin
	/* main: %BB6*/
	/*   %expDiff.0.i9.i = add nsw i32 %22, %11*/
	if ((cur_state == LEGUP_F_main_BB_BB6_8)) begin
		main_BB6_expDiff0i9i_reg <= main_BB6_expDiff0i9i;
		if (start == 1'b0 && ^(main_BB6_expDiff0i9i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_BB6_expDiff0i9i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %BB6*/
	/*   %23 = icmp eq i32 %expDiff.0.i9.i, 0*/
		main_BB6_23 = (main_BB6_expDiff0i9i == 32'd0);
end
always @(*) begin
	/* main: %BB7*/
	/*   %24 = icmp slt i32 %expDiff.0.i9.i, 64*/
		main_BB7_24 = ($signed(main_BB6_expDiff0i9i_reg) < $signed(32'd64));
end
always @(*) begin
	/* main: %BB8*/
	/*   %25 = zext i32 %expDiff.0.i9.i to i64*/
		main_BB8_25 = main_BB6_expDiff0i9i_reg;
end
always @(*) begin
	/* main: %BB8*/
	/*   %26 = lshr i64 %21, %25*/
		main_BB8_26 = (main_BB6_21_reg >>> (main_BB8_25 % 64'd64));
end
always @(*) begin
	/* main: %BB8*/
	/*   %27 = sub nsw i32 0, %expDiff.0.i9.i*/
		main_BB8_27 = (32'd0 - main_BB6_expDiff0i9i_reg);
end
always @(*) begin
	/* main: %BB8*/
	/*   %28 = and i32 %27, 63*/
		main_BB8_28 = (main_BB8_27 & 32'd63);
end
always @(*) begin
	/* main: %BB8*/
	/*   %29 = zext i32 %28 to i64*/
		main_BB8_29 = main_BB8_28;
end
always @(*) begin
	/* main: %BB8*/
	/*   %30 = shl i64 %21, %29*/
		main_BB8_30 = (main_BB6_21_reg <<< (main_BB8_29 % 64'd64));
end
always @(*) begin
	/* main: %BB8*/
	/*   %31 = icmp ne i64 %30, 0*/
		main_BB8_31 = (main_BB8_30 != 64'd0);
end
always @(*) begin
	/* main: %BB8*/
	/*   %32 = zext i1 %31 to i64*/
		main_BB8_32 = main_BB8_31;
end
always @(*) begin
	/* main: %BB8*/
	/*   %33 = or i64 %32, %26*/
		main_BB8_33 = (main_BB8_32 | main_BB8_26);
end
always @(*) begin
	/* main: %BB9*/
	/*   %34 = icmp ne i64 %21, 0*/
		main_BB9_34 = (main_BB6_21_reg != 64'd0);
end
always @(*) begin
	/* main: %BB9*/
	/*   %35 = zext i1 %34 to i64*/
		main_BB9_35 = main_BB9_34;
end
always @(*) begin
	/* main: %BB10*/
	/*   %36 = icmp slt i32 %11, 0*/
		main_BB10_36 = ($signed(main_BB1_11_reg) < $signed(32'd0));
end
always @(*) begin
	/* main: %BB11*/
	/*   %37 = icmp eq i32 %10, 2047*/
		main_BB11_37 = (main_BB1_10_reg == 32'd2047);
end
always @(*) begin
	/* main: %BB12*/
	/*   %38 = icmp eq i64 %15, 0*/
		main_BB12_38 = (main_BB2_15_reg == 64'd0);
end
always @(*) begin
	/* main: %BB15*/
	/*   %39 = icmp eq i32 %8, 0*/
		main_BB15_39 = (main_BB1_8_reg == 32'd0);
end
always @(*) begin
	/* main: %BB15*/
	/*   %40 = or i64 %13, 2305843009213693952*/
		main_BB15_40 = (main_BB2_13_reg | 64'd2305843009213693952);
end
always @(*) begin
	/* main: %BB15*/
	/*   %41 = select i1 %39, i64 %13, i64 %40*/
		main_BB15_41 = (main_BB15_39 ? main_BB2_13_reg : main_BB15_40);
end
always @(posedge clk) begin
	/* main: %BB15*/
	/*   %41 = select i1 %39, i64 %13, i64 %40*/
	if ((cur_state == LEGUP_F_main_BB_BB15_17)) begin
		main_BB15_41_reg <= main_BB15_41;
		if (start == 1'b0 && ^(main_BB15_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_BB15_41_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %BB15*/
	/*   %42 = zext i1 %39 to i32*/
		main_BB15_42 = main_BB15_39;
end
always @(*) begin
	/* main: %BB15*/
	/*   %expDiff.1.i10.i = add nsw i32 %11, %42*/
		main_BB15_expDiff1i10i = (main_BB1_11_reg + main_BB15_42);
end
always @(posedge clk) begin
	/* main: %BB15*/
	/*   %expDiff.1.i10.i = add nsw i32 %11, %42*/
	if ((cur_state == LEGUP_F_main_BB_BB15_17)) begin
		main_BB15_expDiff1i10i_reg <= main_BB15_expDiff1i10i;
		if (start == 1'b0 && ^(main_BB15_expDiff1i10i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_BB15_expDiff1i10i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %BB15*/
	/*   %43 = sub nsw i32 0, %expDiff.1.i10.i*/
		main_BB15_43 = (32'd0 - main_BB15_expDiff1i10i);
end
always @(posedge clk) begin
	/* main: %BB15*/
	/*   %43 = sub nsw i32 0, %expDiff.1.i10.i*/
	if ((cur_state == LEGUP_F_main_BB_BB15_17)) begin
		main_BB15_43_reg <= main_BB15_43;
		if (start == 1'b0 && ^(main_BB15_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_BB15_43_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %BB15*/
	/*   %44 = icmp eq i32 %expDiff.1.i10.i, 0*/
		main_BB15_44 = (main_BB15_expDiff1i10i == 32'd0);
end
always @(*) begin
	/* main: %BB16*/
	/*   %45 = icmp sgt i32 %expDiff.1.i10.i, -64*/
		main_BB16_45 = ($signed(main_BB15_expDiff1i10i_reg) > $signed(-32'd64));
end
always @(*) begin
	/* main: %BB17*/
	/*   %46 = zext i32 %43 to i64*/
		main_BB17_46 = main_BB15_43_reg;
end
always @(*) begin
	/* main: %BB17*/
	/*   %47 = lshr i64 %41, %46*/
		main_BB17_47 = (main_BB15_41_reg >>> (main_BB17_46 % 64'd64));
end
always @(*) begin
	/* main: %BB17*/
	/*   %48 = and i32 %expDiff.1.i10.i, 63*/
		main_BB17_48 = (main_BB15_expDiff1i10i_reg & 32'd63);
end
always @(*) begin
	/* main: %BB17*/
	/*   %49 = zext i32 %48 to i64*/
		main_BB17_49 = main_BB17_48;
end
always @(*) begin
	/* main: %BB17*/
	/*   %50 = shl i64 %41, %49*/
		main_BB17_50 = (main_BB15_41_reg <<< (main_BB17_49 % 64'd64));
end
always @(*) begin
	/* main: %BB17*/
	/*   %51 = icmp ne i64 %50, 0*/
		main_BB17_51 = (main_BB17_50 != 64'd0);
end
always @(*) begin
	/* main: %BB17*/
	/*   %52 = zext i1 %51 to i64*/
		main_BB17_52 = main_BB17_51;
end
always @(*) begin
	/* main: %BB17*/
	/*   %53 = or i64 %52, %47*/
		main_BB17_53 = (main_BB17_52 | main_BB17_47);
end
always @(*) begin
	/* main: %BB18*/
	/*   %54 = icmp ne i64 %41, 0*/
		main_BB18_54 = (main_BB15_41_reg != 64'd0);
end
always @(*) begin
	/* main: %BB18*/
	/*   %55 = zext i1 %54 to i64*/
		main_BB18_55 = main_BB18_54;
end
always @(*) begin
	/* main: %BB20*/
	/*   %56 = or i64 %15, %13*/
		main_BB20_56 = (main_BB2_15_reg | main_BB2_13_reg);
end
always @(*) begin
	/* main: %BB20*/
	/*   %57 = icmp eq i64 %56, 0*/
		main_BB20_57 = (main_BB20_56 == 64'd0);
end
always @(*) begin
	/* main: %BB23*/
	/*   %58 = or i64 %13, 4611686018427387904*/
		main_BB23_58 = (main_BB2_13_reg | 64'd4611686018427387904);
end
always @(*) begin
	/* main: %BB23*/
	/*   %59 = add nuw i64 %58, %15*/
		main_BB23_59 = (main_BB23_58 + main_BB2_15_reg);
end
always @(*) begin
	/* main: %BB24*/
	/*   %60 = phi i64 [ %13, %BB6 ], [ %13, %BB8 ], [ %13, %BB9 ], [ %53, %BB17 ], [ %55, %BB18 ], [ %41, %BB15 ]*/
	if ((((cur_state == LEGUP_F_main_BB_BB6_8) & (memory_controller_waitrequest == 1'd0)) & (main_BB6_23 == 1'd1))) begin
		main_BB24_60 = main_BB2_13_reg;
	end
	/* main: %BB24*/
	/*   %60 = phi i64 [ %13, %BB6 ], [ %13, %BB8 ], [ %13, %BB9 ], [ %53, %BB17 ], [ %55, %BB18 ], [ %41, %BB15 ]*/
	else if (((cur_state == LEGUP_F_main_BB_BB8_10) & (memory_controller_waitrequest == 1'd0))) begin
		main_BB24_60 = main_BB2_13_reg;
	end
	/* main: %BB24*/
	/*   %60 = phi i64 [ %13, %BB6 ], [ %13, %BB8 ], [ %13, %BB9 ], [ %53, %BB17 ], [ %55, %BB18 ], [ %41, %BB15 ]*/
	else if (((cur_state == LEGUP_F_main_BB_BB9_11) & (memory_controller_waitrequest == 1'd0))) begin
		main_BB24_60 = main_BB2_13_reg;
	end
	/* main: %BB24*/
	/*   %60 = phi i64 [ %13, %BB6 ], [ %13, %BB8 ], [ %13, %BB9 ], [ %53, %BB17 ], [ %55, %BB18 ], [ %41, %BB15 ]*/
	else if ((((cur_state == LEGUP_F_main_BB_BB15_17) & (memory_controller_waitrequest == 1'd0)) & (main_BB15_44 == 1'd1))) begin
		main_BB24_60 = main_BB15_41;
	end
	/* main: %BB24*/
	/*   %60 = phi i64 [ %13, %BB6 ], [ %13, %BB8 ], [ %13, %BB9 ], [ %53, %BB17 ], [ %55, %BB18 ], [ %41, %BB15 ]*/
	else if (((cur_state == LEGUP_F_main_BB_BB17_19) & (memory_controller_waitrequest == 1'd0))) begin
		main_BB24_60 = main_BB17_53;
	end
	/* main: %BB24*/
	/*   %60 = phi i64 [ %13, %BB6 ], [ %13, %BB8 ], [ %13, %BB9 ], [ %53, %BB17 ], [ %55, %BB18 ], [ %41, %BB15 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_BB18_20) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_BB24_60 = main_BB18_55;
	end
end
always @(posedge clk) begin
	/* main: %BB24*/
	/*   %60 = phi i64 [ %13, %BB6 ], [ %13, %BB8 ], [ %13, %BB9 ], [ %53, %BB17 ], [ %55, %BB18 ], [ %41, %BB15 ]*/
	if ((((cur_state == LEGUP_F_main_BB_BB6_8) & (memory_controller_waitrequest == 1'd0)) & (main_BB6_23 == 1'd1))) begin
		main_BB24_60_reg <= main_BB24_60;
		if (start == 1'b0 && ^(main_BB24_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_BB24_60_reg"); $finish; end
	end
	/* main: %BB24*/
	/*   %60 = phi i64 [ %13, %BB6 ], [ %13, %BB8 ], [ %13, %BB9 ], [ %53, %BB17 ], [ %55, %BB18 ], [ %41, %BB15 ]*/
	if (((cur_state == LEGUP_F_main_BB_BB8_10) & (memory_controller_waitrequest == 1'd0))) begin
		main_BB24_60_reg <= main_BB24_60;
		if (start == 1'b0 && ^(main_BB24_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_BB24_60_reg"); $finish; end
	end
	/* main: %BB24*/
	/*   %60 = phi i64 [ %13, %BB6 ], [ %13, %BB8 ], [ %13, %BB9 ], [ %53, %BB17 ], [ %55, %BB18 ], [ %41, %BB15 ]*/
	if (((cur_state == LEGUP_F_main_BB_BB9_11) & (memory_controller_waitrequest == 1'd0))) begin
		main_BB24_60_reg <= main_BB24_60;
		if (start == 1'b0 && ^(main_BB24_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_BB24_60_reg"); $finish; end
	end
	/* main: %BB24*/
	/*   %60 = phi i64 [ %13, %BB6 ], [ %13, %BB8 ], [ %13, %BB9 ], [ %53, %BB17 ], [ %55, %BB18 ], [ %41, %BB15 ]*/
	if ((((cur_state == LEGUP_F_main_BB_BB15_17) & (memory_controller_waitrequest == 1'd0)) & (main_BB15_44 == 1'd1))) begin
		main_BB24_60_reg <= main_BB24_60;
		if (start == 1'b0 && ^(main_BB24_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_BB24_60_reg"); $finish; end
	end
	/* main: %BB24*/
	/*   %60 = phi i64 [ %13, %BB6 ], [ %13, %BB8 ], [ %13, %BB9 ], [ %53, %BB17 ], [ %55, %BB18 ], [ %41, %BB15 ]*/
	if (((cur_state == LEGUP_F_main_BB_BB17_19) & (memory_controller_waitrequest == 1'd0))) begin
		main_BB24_60_reg <= main_BB24_60;
		if (start == 1'b0 && ^(main_BB24_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_BB24_60_reg"); $finish; end
	end
	/* main: %BB24*/
	/*   %60 = phi i64 [ %13, %BB6 ], [ %13, %BB8 ], [ %13, %BB9 ], [ %53, %BB17 ], [ %55, %BB18 ], [ %41, %BB15 ]*/
	if (((cur_state == LEGUP_F_main_BB_BB18_20) & (memory_controller_waitrequest == 1'd0))) begin
		main_BB24_60_reg <= main_BB24_60;
		if (start == 1'b0 && ^(main_BB24_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_BB24_60_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %BB24*/
	/*   %61 = phi i64 [ %21, %BB6 ], [ %33, %BB8 ], [ %35, %BB9 ], [ %15, %BB17 ], [ %15, %BB18 ], [ %15, %BB15 ]*/
	if ((((cur_state == LEGUP_F_main_BB_BB6_8) & (memory_controller_waitrequest == 1'd0)) & (main_BB6_23 == 1'd1))) begin
		main_BB24_61 = main_BB6_21;
	end
	/* main: %BB24*/
	/*   %61 = phi i64 [ %21, %BB6 ], [ %33, %BB8 ], [ %35, %BB9 ], [ %15, %BB17 ], [ %15, %BB18 ], [ %15, %BB15 ]*/
	else if (((cur_state == LEGUP_F_main_BB_BB8_10) & (memory_controller_waitrequest == 1'd0))) begin
		main_BB24_61 = main_BB8_33;
	end
	/* main: %BB24*/
	/*   %61 = phi i64 [ %21, %BB6 ], [ %33, %BB8 ], [ %35, %BB9 ], [ %15, %BB17 ], [ %15, %BB18 ], [ %15, %BB15 ]*/
	else if (((cur_state == LEGUP_F_main_BB_BB9_11) & (memory_controller_waitrequest == 1'd0))) begin
		main_BB24_61 = main_BB9_35;
	end
	/* main: %BB24*/
	/*   %61 = phi i64 [ %21, %BB6 ], [ %33, %BB8 ], [ %35, %BB9 ], [ %15, %BB17 ], [ %15, %BB18 ], [ %15, %BB15 ]*/
	else if ((((cur_state == LEGUP_F_main_BB_BB15_17) & (memory_controller_waitrequest == 1'd0)) & (main_BB15_44 == 1'd1))) begin
		main_BB24_61 = main_BB2_15_reg;
	end
	/* main: %BB24*/
	/*   %61 = phi i64 [ %21, %BB6 ], [ %33, %BB8 ], [ %35, %BB9 ], [ %15, %BB17 ], [ %15, %BB18 ], [ %15, %BB15 ]*/
	else if (((cur_state == LEGUP_F_main_BB_BB17_19) & (memory_controller_waitrequest == 1'd0))) begin
		main_BB24_61 = main_BB2_15_reg;
	end
	/* main: %BB24*/
	/*   %61 = phi i64 [ %21, %BB6 ], [ %33, %BB8 ], [ %35, %BB9 ], [ %15, %BB17 ], [ %15, %BB18 ], [ %15, %BB15 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_BB18_20) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_BB24_61 = main_BB2_15_reg;
	end
end
always @(posedge clk) begin
	/* main: %BB24*/
	/*   %61 = phi i64 [ %21, %BB6 ], [ %33, %BB8 ], [ %35, %BB9 ], [ %15, %BB17 ], [ %15, %BB18 ], [ %15, %BB15 ]*/
	if ((((cur_state == LEGUP_F_main_BB_BB6_8) & (memory_controller_waitrequest == 1'd0)) & (main_BB6_23 == 1'd1))) begin
		main_BB24_61_reg <= main_BB24_61;
		if (start == 1'b0 && ^(main_BB24_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_BB24_61_reg"); $finish; end
	end
	/* main: %BB24*/
	/*   %61 = phi i64 [ %21, %BB6 ], [ %33, %BB8 ], [ %35, %BB9 ], [ %15, %BB17 ], [ %15, %BB18 ], [ %15, %BB15 ]*/
	if (((cur_state == LEGUP_F_main_BB_BB8_10) & (memory_controller_waitrequest == 1'd0))) begin
		main_BB24_61_reg <= main_BB24_61;
		if (start == 1'b0 && ^(main_BB24_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_BB24_61_reg"); $finish; end
	end
	/* main: %BB24*/
	/*   %61 = phi i64 [ %21, %BB6 ], [ %33, %BB8 ], [ %35, %BB9 ], [ %15, %BB17 ], [ %15, %BB18 ], [ %15, %BB15 ]*/
	if (((cur_state == LEGUP_F_main_BB_BB9_11) & (memory_controller_waitrequest == 1'd0))) begin
		main_BB24_61_reg <= main_BB24_61;
		if (start == 1'b0 && ^(main_BB24_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_BB24_61_reg"); $finish; end
	end
	/* main: %BB24*/
	/*   %61 = phi i64 [ %21, %BB6 ], [ %33, %BB8 ], [ %35, %BB9 ], [ %15, %BB17 ], [ %15, %BB18 ], [ %15, %BB15 ]*/
	if ((((cur_state == LEGUP_F_main_BB_BB15_17) & (memory_controller_waitrequest == 1'd0)) & (main_BB15_44 == 1'd1))) begin
		main_BB24_61_reg <= main_BB24_61;
		if (start == 1'b0 && ^(main_BB24_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_BB24_61_reg"); $finish; end
	end
	/* main: %BB24*/
	/*   %61 = phi i64 [ %21, %BB6 ], [ %33, %BB8 ], [ %35, %BB9 ], [ %15, %BB17 ], [ %15, %BB18 ], [ %15, %BB15 ]*/
	if (((cur_state == LEGUP_F_main_BB_BB17_19) & (memory_controller_waitrequest == 1'd0))) begin
		main_BB24_61_reg <= main_BB24_61;
		if (start == 1'b0 && ^(main_BB24_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_BB24_61_reg"); $finish; end
	end
	/* main: %BB24*/
	/*   %61 = phi i64 [ %21, %BB6 ], [ %33, %BB8 ], [ %35, %BB9 ], [ %15, %BB17 ], [ %15, %BB18 ], [ %15, %BB15 ]*/
	if (((cur_state == LEGUP_F_main_BB_BB18_20) & (memory_controller_waitrequest == 1'd0))) begin
		main_BB24_61_reg <= main_BB24_61;
		if (start == 1'b0 && ^(main_BB24_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_BB24_61_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %BB24*/
	/*   %zExp.0.i17.i = phi i32 [ %8, %BB6 ], [ %8, %BB8 ], [ %8, %BB9 ], [ %10, %BB17 ], [ %10, %BB18 ], [ %10, %BB15 ]*/
	if ((((cur_state == LEGUP_F_main_BB_BB6_8) & (memory_controller_waitrequest == 1'd0)) & (main_BB6_23 == 1'd1))) begin
		main_BB24_zExp0i17i = main_BB1_8_reg;
	end
	/* main: %BB24*/
	/*   %zExp.0.i17.i = phi i32 [ %8, %BB6 ], [ %8, %BB8 ], [ %8, %BB9 ], [ %10, %BB17 ], [ %10, %BB18 ], [ %10, %BB15 ]*/
	else if (((cur_state == LEGUP_F_main_BB_BB8_10) & (memory_controller_waitrequest == 1'd0))) begin
		main_BB24_zExp0i17i = main_BB1_8_reg;
	end
	/* main: %BB24*/
	/*   %zExp.0.i17.i = phi i32 [ %8, %BB6 ], [ %8, %BB8 ], [ %8, %BB9 ], [ %10, %BB17 ], [ %10, %BB18 ], [ %10, %BB15 ]*/
	else if (((cur_state == LEGUP_F_main_BB_BB9_11) & (memory_controller_waitrequest == 1'd0))) begin
		main_BB24_zExp0i17i = main_BB1_8_reg;
	end
	/* main: %BB24*/
	/*   %zExp.0.i17.i = phi i32 [ %8, %BB6 ], [ %8, %BB8 ], [ %8, %BB9 ], [ %10, %BB17 ], [ %10, %BB18 ], [ %10, %BB15 ]*/
	else if ((((cur_state == LEGUP_F_main_BB_BB15_17) & (memory_controller_waitrequest == 1'd0)) & (main_BB15_44 == 1'd1))) begin
		main_BB24_zExp0i17i = main_BB1_10_reg;
	end
	/* main: %BB24*/
	/*   %zExp.0.i17.i = phi i32 [ %8, %BB6 ], [ %8, %BB8 ], [ %8, %BB9 ], [ %10, %BB17 ], [ %10, %BB18 ], [ %10, %BB15 ]*/
	else if (((cur_state == LEGUP_F_main_BB_BB17_19) & (memory_controller_waitrequest == 1'd0))) begin
		main_BB24_zExp0i17i = main_BB1_10_reg;
	end
	/* main: %BB24*/
	/*   %zExp.0.i17.i = phi i32 [ %8, %BB6 ], [ %8, %BB8 ], [ %8, %BB9 ], [ %10, %BB17 ], [ %10, %BB18 ], [ %10, %BB15 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_BB18_20) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_BB24_zExp0i17i = main_BB1_10_reg;
	end
end
always @(posedge clk) begin
	/* main: %BB24*/
	/*   %zExp.0.i17.i = phi i32 [ %8, %BB6 ], [ %8, %BB8 ], [ %8, %BB9 ], [ %10, %BB17 ], [ %10, %BB18 ], [ %10, %BB15 ]*/
	if ((((cur_state == LEGUP_F_main_BB_BB6_8) & (memory_controller_waitrequest == 1'd0)) & (main_BB6_23 == 1'd1))) begin
		main_BB24_zExp0i17i_reg <= main_BB24_zExp0i17i;
		if (start == 1'b0 && ^(main_BB24_zExp0i17i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_BB24_zExp0i17i_reg"); $finish; end
	end
	/* main: %BB24*/
	/*   %zExp.0.i17.i = phi i32 [ %8, %BB6 ], [ %8, %BB8 ], [ %8, %BB9 ], [ %10, %BB17 ], [ %10, %BB18 ], [ %10, %BB15 ]*/
	if (((cur_state == LEGUP_F_main_BB_BB8_10) & (memory_controller_waitrequest == 1'd0))) begin
		main_BB24_zExp0i17i_reg <= main_BB24_zExp0i17i;
		if (start == 1'b0 && ^(main_BB24_zExp0i17i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_BB24_zExp0i17i_reg"); $finish; end
	end
	/* main: %BB24*/
	/*   %zExp.0.i17.i = phi i32 [ %8, %BB6 ], [ %8, %BB8 ], [ %8, %BB9 ], [ %10, %BB17 ], [ %10, %BB18 ], [ %10, %BB15 ]*/
	if (((cur_state == LEGUP_F_main_BB_BB9_11) & (memory_controller_waitrequest == 1'd0))) begin
		main_BB24_zExp0i17i_reg <= main_BB24_zExp0i17i;
		if (start == 1'b0 && ^(main_BB24_zExp0i17i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_BB24_zExp0i17i_reg"); $finish; end
	end
	/* main: %BB24*/
	/*   %zExp.0.i17.i = phi i32 [ %8, %BB6 ], [ %8, %BB8 ], [ %8, %BB9 ], [ %10, %BB17 ], [ %10, %BB18 ], [ %10, %BB15 ]*/
	if ((((cur_state == LEGUP_F_main_BB_BB15_17) & (memory_controller_waitrequest == 1'd0)) & (main_BB15_44 == 1'd1))) begin
		main_BB24_zExp0i17i_reg <= main_BB24_zExp0i17i;
		if (start == 1'b0 && ^(main_BB24_zExp0i17i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_BB24_zExp0i17i_reg"); $finish; end
	end
	/* main: %BB24*/
	/*   %zExp.0.i17.i = phi i32 [ %8, %BB6 ], [ %8, %BB8 ], [ %8, %BB9 ], [ %10, %BB17 ], [ %10, %BB18 ], [ %10, %BB15 ]*/
	if (((cur_state == LEGUP_F_main_BB_BB17_19) & (memory_controller_waitrequest == 1'd0))) begin
		main_BB24_zExp0i17i_reg <= main_BB24_zExp0i17i;
		if (start == 1'b0 && ^(main_BB24_zExp0i17i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_BB24_zExp0i17i_reg"); $finish; end
	end
	/* main: %BB24*/
	/*   %zExp.0.i17.i = phi i32 [ %8, %BB6 ], [ %8, %BB8 ], [ %8, %BB9 ], [ %10, %BB17 ], [ %10, %BB18 ], [ %10, %BB15 ]*/
	if (((cur_state == LEGUP_F_main_BB_BB18_20) & (memory_controller_waitrequest == 1'd0))) begin
		main_BB24_zExp0i17i_reg <= main_BB24_zExp0i17i;
		if (start == 1'b0 && ^(main_BB24_zExp0i17i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_BB24_zExp0i17i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %BB24*/
	/*   %62 = or i64 %60, 2305843009213693952*/
		main_BB24_62 = (main_BB24_60_reg | 64'd2305843009213693952);
end
always @(*) begin
	/* main: %BB24*/
	/*   %63 = add i64 %62, %61*/
		main_BB24_63 = (main_BB24_62 + main_BB24_61_reg);
end
always @(*) begin
	/* main: %BB24*/
	/*   %64 = shl i64 %63, 1*/
		main_BB24_64 = (main_BB24_63 <<< (64'd1 % 64'd64));
end
always @(*) begin
	/* main: %BB24*/
	/*   %65 = icmp slt i64 %64, 0*/
		main_BB24_65 = ($signed(main_BB24_64) < $signed(64'd0));
end
always @(posedge clk) begin
	/* main: %BB24*/
	/*   %65 = icmp slt i64 %64, 0*/
	if ((cur_state == LEGUP_F_main_BB_BB24_26)) begin
		main_BB24_65_reg <= main_BB24_65;
		if (start == 1'b0 && ^(main_BB24_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_BB24_65_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %BB24*/
	/*   %not..i.i = xor i1 %65, true*/
		main_BB24_notii = (main_BB24_65_reg ^ 1'd1);
end
always @(*) begin
	/* main: %BB24*/
	/*   %66 = sext i1 %not..i.i to i32*/
		main_BB24_66 = $signed(main_BB24_notii);
end
always @(posedge clk) begin
	/* main: %BB24*/
	/*   %66 = sext i1 %not..i.i to i32*/
	if ((cur_state == LEGUP_F_main_BB_BB24_27)) begin
		main_BB24_66_reg <= main_BB24_66;
		if (start == 1'b0 && ^(main_BB24_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_BB24_66_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %BB24*/
	/*   %zExp.0..i.i = add nsw i32 %66, %zExp.0.i17.i*/
		main_BB24_zExp0ii = (main_BB24_66_reg + main_BB24_zExp0i17i_reg);
end
always @(*) begin
	/* main: %BB24*/
	/*   %..i.i = select i1 %65, i64 %63, i64 %64*/
		main_BB24_ii = (main_BB24_65 ? main_BB24_63 : main_BB24_64);
end
always @(posedge clk) begin
	/* main: %BB24*/
	/*   %..i.i = select i1 %65, i64 %63, i64 %64*/
	if ((cur_state == LEGUP_F_main_BB_BB24_26)) begin
		main_BB24_ii_reg <= main_BB24_ii;
		if (start == 1'b0 && ^(main_BB24_ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_BB24_ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %BB25*/
	/*   %zExp.1.i.i = phi i32 [ %8, %BB23 ], [ %zExp.0..i.i, %BB24 ]*/
	if (((cur_state == LEGUP_F_main_BB_BB23_25) & (memory_controller_waitrequest == 1'd0))) begin
		main_BB25_zExp1ii = main_BB1_8_reg;
	end
	/* main: %BB25*/
	/*   %zExp.1.i.i = phi i32 [ %8, %BB23 ], [ %zExp.0..i.i, %BB24 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_BB24_28) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_BB25_zExp1ii = main_BB24_zExp0ii;
	end
end
always @(posedge clk) begin
	/* main: %BB25*/
	/*   %zExp.1.i.i = phi i32 [ %8, %BB23 ], [ %zExp.0..i.i, %BB24 ]*/
	if (((cur_state == LEGUP_F_main_BB_BB23_25) & (memory_controller_waitrequest == 1'd0))) begin
		main_BB25_zExp1ii_reg <= main_BB25_zExp1ii;
		if (start == 1'b0 && ^(main_BB25_zExp1ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_BB25_zExp1ii_reg"); $finish; end
	end
	/* main: %BB25*/
	/*   %zExp.1.i.i = phi i32 [ %8, %BB23 ], [ %zExp.0..i.i, %BB24 ]*/
	if (((cur_state == LEGUP_F_main_BB_BB24_28) & (memory_controller_waitrequest == 1'd0))) begin
		main_BB25_zExp1ii_reg <= main_BB25_zExp1ii;
		if (start == 1'b0 && ^(main_BB25_zExp1ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_BB25_zExp1ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %BB25*/
	/*   %zSig.0.i18.i = phi i64 [ %59, %BB23 ], [ %..i.i, %BB24 ]*/
	if (((cur_state == LEGUP_F_main_BB_BB23_25) & (memory_controller_waitrequest == 1'd0))) begin
		main_BB25_zSig0i18i = main_BB23_59;
	end
	/* main: %BB25*/
	/*   %zSig.0.i18.i = phi i64 [ %59, %BB23 ], [ %..i.i, %BB24 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_BB24_28) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_BB25_zSig0i18i = main_BB24_ii_reg;
	end
end
always @(posedge clk) begin
	/* main: %BB25*/
	/*   %zSig.0.i18.i = phi i64 [ %59, %BB23 ], [ %..i.i, %BB24 ]*/
	if (((cur_state == LEGUP_F_main_BB_BB23_25) & (memory_controller_waitrequest == 1'd0))) begin
		main_BB25_zSig0i18i_reg <= main_BB25_zSig0i18i;
		if (start == 1'b0 && ^(main_BB25_zSig0i18i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_BB25_zSig0i18i_reg"); $finish; end
	end
	/* main: %BB25*/
	/*   %zSig.0.i18.i = phi i64 [ %59, %BB23 ], [ %..i.i, %BB24 ]*/
	if (((cur_state == LEGUP_F_main_BB_BB24_28) & (memory_controller_waitrequest == 1'd0))) begin
		main_BB25_zSig0i18i_reg <= main_BB25_zSig0i18i;
		if (start == 1'b0 && ^(main_BB25_zSig0i18i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_BB25_zSig0i18i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %BB25*/
	/*   %67 = and i32 %zExp.1.i.i, 65535*/
		main_BB25_67 = (main_BB25_zExp1ii_reg & 32'd65535);
end
always @(*) begin
	/* main: %BB25*/
	/*   %68 = icmp ugt i32 %67, 2044*/
		main_BB25_68 = (main_BB25_67 > 32'd2044);
end
always @(*) begin
	/* main: %BB26*/
	/*   %69 = icmp sgt i32 %zExp.1.i.i, 2045*/
		main_BB26_69 = ($signed(main_BB25_zExp1ii_reg) > $signed(32'd2045));
end
always @(*) begin
	/* main: %BB27*/
	/*   %70 = icmp eq i32 %zExp.1.i.i, 2045*/
		main_BB27_70 = (main_BB25_zExp1ii_reg == 32'd2045);
end
always @(*) begin
	/* main: %BB28*/
	/*   %71 = add i64 %zSig.0.i18.i, 512*/
		main_BB28_71 = (main_BB25_zSig0i18i_reg + 64'd512);
end
always @(*) begin
	/* main: %BB28*/
	/*   %72 = icmp slt i64 %71, 0*/
		main_BB28_72 = ($signed(main_BB28_71) < $signed(64'd0));
end
always @(*) begin
	/* main: %BB30*/
	/*   %73 = icmp slt i32 %zExp.1.i.i, 0*/
		main_BB30_73 = ($signed(main_BB25_zExp1ii_reg) < $signed(32'd0));
end
always @(*) begin
	/* main: %BB31*/
	/*   %74 = icmp sgt i32 %zExp.1.i.i, -64*/
		main_BB31_74 = ($signed(main_BB25_zExp1ii_reg) > $signed(-32'd64));
end
always @(*) begin
	/* main: %BB32*/
	/*   %75 = sub nsw i32 0, %zExp.1.i.i*/
		main_BB32_75 = (32'd0 - main_BB25_zExp1ii_reg);
end
always @(*) begin
	/* main: %BB32*/
	/*   %76 = zext i32 %75 to i64*/
		main_BB32_76 = main_BB32_75;
end
always @(*) begin
	/* main: %BB32*/
	/*   %77 = lshr i64 %zSig.0.i18.i, %76*/
		main_BB32_77 = (main_BB25_zSig0i18i_reg >>> (main_BB32_76 % 64'd64));
end
always @(*) begin
	/* main: %BB32*/
	/*   %78 = and i32 %zExp.1.i.i, 63*/
		main_BB32_78 = (main_BB25_zExp1ii_reg & 32'd63);
end
always @(*) begin
	/* main: %BB32*/
	/*   %79 = zext i32 %78 to i64*/
		main_BB32_79 = main_BB32_78;
end
always @(*) begin
	/* main: %BB32*/
	/*   %80 = shl i64 %zSig.0.i18.i, %79*/
		main_BB32_80 = (main_BB25_zSig0i18i_reg <<< (main_BB32_79 % 64'd64));
end
always @(*) begin
	/* main: %BB32*/
	/*   %81 = icmp ne i64 %80, 0*/
		main_BB32_81 = (main_BB32_80 != 64'd0);
end
always @(*) begin
	/* main: %BB32*/
	/*   %82 = zext i1 %81 to i64*/
		main_BB32_82 = main_BB32_81;
end
always @(*) begin
	/* main: %BB32*/
	/*   %83 = or i64 %82, %77*/
		main_BB32_83 = (main_BB32_82 | main_BB32_77);
end
always @(*) begin
	/* main: %BB33*/
	/*   %84 = icmp ne i64 %zSig.0.i18.i, 0*/
		main_BB33_84 = (main_BB25_zSig0i18i_reg != 64'd0);
end
always @(*) begin
	/* main: %BB33*/
	/*   %85 = zext i1 %84 to i64*/
		main_BB33_85 = main_BB33_84;
end
always @(*) begin
	/* main: %BB34*/
	/*   %z.0.i.i.i.i = phi i64 [ %83, %BB32 ], [ %85, %BB33 ]*/
	if (((cur_state == LEGUP_F_main_BB_BB32_36) & (memory_controller_waitrequest == 1'd0))) begin
		main_BB34_z0iiii = main_BB32_83;
	end
	/* main: %BB34*/
	/*   %z.0.i.i.i.i = phi i64 [ %83, %BB32 ], [ %85, %BB33 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_BB33_37) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_BB34_z0iiii = main_BB33_85;
	end
end
always @(posedge clk) begin
	/* main: %BB34*/
	/*   %z.0.i.i.i.i = phi i64 [ %83, %BB32 ], [ %85, %BB33 ]*/
	if (((cur_state == LEGUP_F_main_BB_BB32_36) & (memory_controller_waitrequest == 1'd0))) begin
		main_BB34_z0iiii_reg <= main_BB34_z0iiii;
		if (start == 1'b0 && ^(main_BB34_z0iiii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_BB34_z0iiii_reg"); $finish; end
	end
	/* main: %BB34*/
	/*   %z.0.i.i.i.i = phi i64 [ %83, %BB32 ], [ %85, %BB33 ]*/
	if (((cur_state == LEGUP_F_main_BB_BB33_37) & (memory_controller_waitrequest == 1'd0))) begin
		main_BB34_z0iiii_reg <= main_BB34_z0iiii;
		if (start == 1'b0 && ^(main_BB34_z0iiii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_BB34_z0iiii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %BB34*/
	/*   %.tr3.i.i.i = trunc i64 %z.0.i.i.i.i to i32*/
		main_BB34_tr3iii = main_BB34_z0iiii_reg[31:0];
end
always @(*) begin
	/* main: %BB34*/
	/*   %86 = and i32 %.tr3.i.i.i, 1023*/
		main_BB34_86 = (main_BB34_tr3iii & 32'd1023);
end
always @(*) begin
	/* main: %BB34*/
	/*   %87 = icmp eq i32 %86, 0*/
		main_BB34_87 = (main_BB34_86 == 32'd0);
end
always @(*) begin
	/* main: %BB38*/
	/*   %88 = shl i64 %0, 10*/
		main_BB38_88 = (main_BB1_0_reg <<< (64'd10 % 64'd64));
end
always @(*) begin
	/* main: %BB38*/
	/*   %89 = and i64 %88, 4611686018427386880*/
		main_BB38_89 = (main_BB38_88 & 64'd4611686018427386880);
end
always @(posedge clk) begin
	/* main: %BB38*/
	/*   %89 = and i64 %88, 4611686018427386880*/
	if ((cur_state == LEGUP_F_main_BB_BB38_42)) begin
		main_BB38_89_reg <= main_BB38_89;
		if (start == 1'b0 && ^(main_BB38_89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_BB38_89_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %BB38*/
	/*   %90 = shl i64 %1, 10*/
		main_BB38_90 = (main_BB1_1_reg <<< (64'd10 % 64'd64));
end
always @(*) begin
	/* main: %BB38*/
	/*   %91 = and i64 %90, 4611686018427386880*/
		main_BB38_91 = (main_BB38_90 & 64'd4611686018427386880);
end
always @(posedge clk) begin
	/* main: %BB38*/
	/*   %91 = and i64 %90, 4611686018427386880*/
	if ((cur_state == LEGUP_F_main_BB_BB38_42)) begin
		main_BB38_91_reg <= main_BB38_91;
		if (start == 1'b0 && ^(main_BB38_91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_BB38_91_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %BB38*/
	/*   %92 = icmp sgt i32 %11, 0*/
		main_BB38_92 = ($signed(main_BB1_11_reg) > $signed(32'd0));
end
always @(*) begin
	/* main: %BB39*/
	/*   %93 = icmp slt i32 %11, 0*/
		main_BB39_93 = ($signed(main_BB1_11_reg) < $signed(32'd0));
end
always @(*) begin
	/* main: %BB41*/
	/*   %94 = or i64 %91, %89*/
		main_BB41_94 = (main_BB38_91_reg | main_BB38_89_reg);
end
always @(*) begin
	/* main: %BB41*/
	/*   %95 = icmp eq i64 %94, 0*/
		main_BB41_95 = (main_BB41_94 == 64'd0);
end
always @(*) begin
	/* main: %BB45*/
	/*   %aExp.0.i.i = phi i32 [ 1, %BB44 ], [ %8, %BB40 ]*/
	if (((((cur_state == LEGUP_F_main_BB_BB40_44) & (memory_controller_waitrequest == 1'd0)) & (main_BB1_8_reg != 32'd2047)) & (main_BB1_8_reg != 32'd0))) begin
		main_BB45_aExp0ii = main_BB1_8_reg;
	end
	/* main: %BB45*/
	/*   %aExp.0.i.i = phi i32 [ 1, %BB44 ], [ %8, %BB40 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_BB44_48) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_BB45_aExp0ii = 32'd1;
	end
end
always @(posedge clk) begin
	/* main: %BB45*/
	/*   %aExp.0.i.i = phi i32 [ 1, %BB44 ], [ %8, %BB40 ]*/
	if (((((cur_state == LEGUP_F_main_BB_BB40_44) & (memory_controller_waitrequest == 1'd0)) & (main_BB1_8_reg != 32'd2047)) & (main_BB1_8_reg != 32'd0))) begin
		main_BB45_aExp0ii_reg <= main_BB45_aExp0ii;
		if (start == 1'b0 && ^(main_BB45_aExp0ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_BB45_aExp0ii_reg"); $finish; end
	end
	/* main: %BB45*/
	/*   %aExp.0.i.i = phi i32 [ 1, %BB44 ], [ %8, %BB40 ]*/
	if (((cur_state == LEGUP_F_main_BB_BB44_48) & (memory_controller_waitrequest == 1'd0))) begin
		main_BB45_aExp0ii_reg <= main_BB45_aExp0ii;
		if (start == 1'b0 && ^(main_BB45_aExp0ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_BB45_aExp0ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %BB45*/
	/*   %bExp.0.i.i = phi i32 [ 1, %BB44 ], [ %10, %BB40 ]*/
	if (((((cur_state == LEGUP_F_main_BB_BB40_44) & (memory_controller_waitrequest == 1'd0)) & (main_BB1_8_reg != 32'd2047)) & (main_BB1_8_reg != 32'd0))) begin
		main_BB45_bExp0ii = main_BB1_10_reg;
	end
	/* main: %BB45*/
	/*   %bExp.0.i.i = phi i32 [ 1, %BB44 ], [ %10, %BB40 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_BB44_48) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_BB45_bExp0ii = 32'd1;
	end
end
always @(posedge clk) begin
	/* main: %BB45*/
	/*   %bExp.0.i.i = phi i32 [ 1, %BB44 ], [ %10, %BB40 ]*/
	if (((((cur_state == LEGUP_F_main_BB_BB40_44) & (memory_controller_waitrequest == 1'd0)) & (main_BB1_8_reg != 32'd2047)) & (main_BB1_8_reg != 32'd0))) begin
		main_BB45_bExp0ii_reg <= main_BB45_bExp0ii;
		if (start == 1'b0 && ^(main_BB45_bExp0ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_BB45_bExp0ii_reg"); $finish; end
	end
	/* main: %BB45*/
	/*   %bExp.0.i.i = phi i32 [ 1, %BB44 ], [ %10, %BB40 ]*/
	if (((cur_state == LEGUP_F_main_BB_BB44_48) & (memory_controller_waitrequest == 1'd0))) begin
		main_BB45_bExp0ii_reg <= main_BB45_bExp0ii;
		if (start == 1'b0 && ^(main_BB45_bExp0ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_BB45_bExp0ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %BB45*/
	/*   %96 = icmp ult i64 %91, %89*/
		main_BB45_96 = (main_BB38_91_reg < main_BB38_89_reg);
end
always @(*) begin
	/* main: %BB46*/
	/*   %97 = icmp ult i64 %89, %91*/
		main_BB46_97 = (main_BB38_89_reg < main_BB38_91_reg);
end
always @(*) begin
	/* main: %BB47*/
	/*   %98 = icmp eq i32 %10, 2047*/
		main_BB47_98 = (main_BB1_10_reg == 32'd2047);
end
always @(*) begin
	/* main: %BB48*/
	/*   %99 = icmp eq i64 %91, 0*/
		main_BB48_99 = (main_BB38_91_reg == 64'd0);
end
always @(*) begin
	/* main: %BB51*/
	/*   %100 = icmp eq i32 %8, 0*/
		main_BB51_100 = (main_BB1_8_reg == 32'd0);
end
always @(*) begin
	/* main: %BB51*/
	/*   %101 = or i64 %89, 4611686018427387904*/
		main_BB51_101 = (main_BB38_89_reg | 64'd4611686018427387904);
end
always @(*) begin
	/* main: %BB51*/
	/*   %102 = select i1 %100, i64 %89, i64 %101*/
		main_BB51_102 = (main_BB51_100 ? main_BB38_89_reg : main_BB51_101);
end
always @(posedge clk) begin
	/* main: %BB51*/
	/*   %102 = select i1 %100, i64 %89, i64 %101*/
	if ((cur_state == LEGUP_F_main_BB_BB51_55)) begin
		main_BB51_102_reg <= main_BB51_102;
		if (start == 1'b0 && ^(main_BB51_102) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_BB51_102_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %BB51*/
	/*   %103 = zext i1 %100 to i32*/
		main_BB51_103 = main_BB51_100;
end
always @(*) begin
	/* main: %BB51*/
	/*   %expDiff.0.i.i = add nsw i32 %11, %103*/
		main_BB51_expDiff0ii = (main_BB1_11_reg + main_BB51_103);
end
always @(posedge clk) begin
	/* main: %BB51*/
	/*   %expDiff.0.i.i = add nsw i32 %11, %103*/
	if ((cur_state == LEGUP_F_main_BB_BB51_55)) begin
		main_BB51_expDiff0ii_reg <= main_BB51_expDiff0ii;
		if (start == 1'b0 && ^(main_BB51_expDiff0ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_BB51_expDiff0ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %BB51*/
	/*   %104 = sub nsw i32 0, %expDiff.0.i.i*/
		main_BB51_104 = (32'd0 - main_BB51_expDiff0ii);
end
always @(posedge clk) begin
	/* main: %BB51*/
	/*   %104 = sub nsw i32 0, %expDiff.0.i.i*/
	if ((cur_state == LEGUP_F_main_BB_BB51_55)) begin
		main_BB51_104_reg <= main_BB51_104;
		if (start == 1'b0 && ^(main_BB51_104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_BB51_104_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %BB51*/
	/*   %105 = icmp eq i32 %expDiff.0.i.i, 0*/
		main_BB51_105 = (main_BB51_expDiff0ii == 32'd0);
end
always @(*) begin
	/* main: %BB52*/
	/*   %106 = icmp sgt i32 %expDiff.0.i.i, -64*/
		main_BB52_106 = ($signed(main_BB51_expDiff0ii_reg) > $signed(-32'd64));
end
always @(*) begin
	/* main: %BB53*/
	/*   %107 = zext i32 %104 to i64*/
		main_BB53_107 = main_BB51_104_reg;
end
always @(*) begin
	/* main: %BB53*/
	/*   %108 = lshr i64 %102, %107*/
		main_BB53_108 = (main_BB51_102_reg >>> (main_BB53_107 % 64'd64));
end
always @(*) begin
	/* main: %BB53*/
	/*   %109 = and i32 %expDiff.0.i.i, 63*/
		main_BB53_109 = (main_BB51_expDiff0ii_reg & 32'd63);
end
always @(*) begin
	/* main: %BB53*/
	/*   %110 = zext i32 %109 to i64*/
		main_BB53_110 = main_BB53_109;
end
always @(*) begin
	/* main: %BB53*/
	/*   %111 = shl i64 %102, %110*/
		main_BB53_111 = (main_BB51_102_reg <<< (main_BB53_110 % 64'd64));
end
always @(*) begin
	/* main: %BB53*/
	/*   %112 = icmp ne i64 %111, 0*/
		main_BB53_112 = (main_BB53_111 != 64'd0);
end
always @(*) begin
	/* main: %BB53*/
	/*   %113 = zext i1 %112 to i64*/
		main_BB53_113 = main_BB53_112;
end
always @(*) begin
	/* main: %BB53*/
	/*   %114 = or i64 %113, %108*/
		main_BB53_114 = (main_BB53_113 | main_BB53_108);
end
always @(*) begin
	/* main: %BB54*/
	/*   %115 = icmp ne i64 %102, 0*/
		main_BB54_115 = (main_BB51_102_reg != 64'd0);
end
always @(*) begin
	/* main: %BB54*/
	/*   %116 = zext i1 %115 to i64*/
		main_BB54_116 = main_BB54_115;
end
always @(*) begin
	/* main: %BB55*/
	/*   %z.0.i2.i.i = phi i64 [ %114, %BB53 ], [ %116, %BB54 ], [ %102, %BB51 ]*/
	if ((((cur_state == LEGUP_F_main_BB_BB51_55) & (memory_controller_waitrequest == 1'd0)) & (main_BB51_105 == 1'd1))) begin
		main_BB55_z0i2ii = main_BB51_102;
	end
	/* main: %BB55*/
	/*   %z.0.i2.i.i = phi i64 [ %114, %BB53 ], [ %116, %BB54 ], [ %102, %BB51 ]*/
	else if (((cur_state == LEGUP_F_main_BB_BB53_57) & (memory_controller_waitrequest == 1'd0))) begin
		main_BB55_z0i2ii = main_BB53_114;
	end
	/* main: %BB55*/
	/*   %z.0.i2.i.i = phi i64 [ %114, %BB53 ], [ %116, %BB54 ], [ %102, %BB51 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_BB54_58) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_BB55_z0i2ii = main_BB54_116;
	end
end
always @(posedge clk) begin
	/* main: %BB55*/
	/*   %z.0.i2.i.i = phi i64 [ %114, %BB53 ], [ %116, %BB54 ], [ %102, %BB51 ]*/
	if ((((cur_state == LEGUP_F_main_BB_BB51_55) & (memory_controller_waitrequest == 1'd0)) & (main_BB51_105 == 1'd1))) begin
		main_BB55_z0i2ii_reg <= main_BB55_z0i2ii;
		if (start == 1'b0 && ^(main_BB55_z0i2ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_BB55_z0i2ii_reg"); $finish; end
	end
	/* main: %BB55*/
	/*   %z.0.i2.i.i = phi i64 [ %114, %BB53 ], [ %116, %BB54 ], [ %102, %BB51 ]*/
	if (((cur_state == LEGUP_F_main_BB_BB53_57) & (memory_controller_waitrequest == 1'd0))) begin
		main_BB55_z0i2ii_reg <= main_BB55_z0i2ii;
		if (start == 1'b0 && ^(main_BB55_z0i2ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_BB55_z0i2ii_reg"); $finish; end
	end
	/* main: %BB55*/
	/*   %z.0.i2.i.i = phi i64 [ %114, %BB53 ], [ %116, %BB54 ], [ %102, %BB51 ]*/
	if (((cur_state == LEGUP_F_main_BB_BB54_58) & (memory_controller_waitrequest == 1'd0))) begin
		main_BB55_z0i2ii_reg <= main_BB55_z0i2ii;
		if (start == 1'b0 && ^(main_BB55_z0i2ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_BB55_z0i2ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %BB55*/
	/*   %117 = or i64 %91, 4611686018427387904*/
		main_BB55_117 = (main_BB38_91_reg | 64'd4611686018427387904);
end
always @(*) begin
	/* main: %BB56*/
	/*   %118 = phi i64 [ %z.0.i2.i.i, %BB55 ], [ %89, %BB46 ]*/
	if ((((cur_state == LEGUP_F_main_BB_BB46_50) & (memory_controller_waitrequest == 1'd0)) & (main_BB46_97 == 1'd1))) begin
		main_BB56_118 = main_BB38_89_reg;
	end
	/* main: %BB56*/
	/*   %118 = phi i64 [ %z.0.i2.i.i, %BB55 ], [ %89, %BB46 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_BB55_59) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_BB56_118 = main_BB55_z0i2ii_reg;
	end
end
always @(posedge clk) begin
	/* main: %BB56*/
	/*   %118 = phi i64 [ %z.0.i2.i.i, %BB55 ], [ %89, %BB46 ]*/
	if ((((cur_state == LEGUP_F_main_BB_BB46_50) & (memory_controller_waitrequest == 1'd0)) & (main_BB46_97 == 1'd1))) begin
		main_BB56_118_reg <= main_BB56_118;
		if (start == 1'b0 && ^(main_BB56_118) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_BB56_118_reg"); $finish; end
	end
	/* main: %BB56*/
	/*   %118 = phi i64 [ %z.0.i2.i.i, %BB55 ], [ %89, %BB46 ]*/
	if (((cur_state == LEGUP_F_main_BB_BB55_59) & (memory_controller_waitrequest == 1'd0))) begin
		main_BB56_118_reg <= main_BB56_118;
		if (start == 1'b0 && ^(main_BB56_118) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_BB56_118_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %BB56*/
	/*   %119 = phi i64 [ %117, %BB55 ], [ %91, %BB46 ]*/
	if ((((cur_state == LEGUP_F_main_BB_BB46_50) & (memory_controller_waitrequest == 1'd0)) & (main_BB46_97 == 1'd1))) begin
		main_BB56_119 = main_BB38_91_reg;
	end
	/* main: %BB56*/
	/*   %119 = phi i64 [ %117, %BB55 ], [ %91, %BB46 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_BB55_59) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_BB56_119 = main_BB55_117;
	end
end
always @(posedge clk) begin
	/* main: %BB56*/
	/*   %119 = phi i64 [ %117, %BB55 ], [ %91, %BB46 ]*/
	if ((((cur_state == LEGUP_F_main_BB_BB46_50) & (memory_controller_waitrequest == 1'd0)) & (main_BB46_97 == 1'd1))) begin
		main_BB56_119_reg <= main_BB56_119;
		if (start == 1'b0 && ^(main_BB56_119) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_BB56_119_reg"); $finish; end
	end
	/* main: %BB56*/
	/*   %119 = phi i64 [ %117, %BB55 ], [ %91, %BB46 ]*/
	if (((cur_state == LEGUP_F_main_BB_BB55_59) & (memory_controller_waitrequest == 1'd0))) begin
		main_BB56_119_reg <= main_BB56_119;
		if (start == 1'b0 && ^(main_BB56_119) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_BB56_119_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %BB56*/
	/*   %bExp.1.i.i = phi i32 [ %10, %BB55 ], [ %bExp.0.i.i, %BB46 ]*/
	if ((((cur_state == LEGUP_F_main_BB_BB46_50) & (memory_controller_waitrequest == 1'd0)) & (main_BB46_97 == 1'd1))) begin
		main_BB56_bExp1ii = main_BB45_bExp0ii_reg;
	end
	/* main: %BB56*/
	/*   %bExp.1.i.i = phi i32 [ %10, %BB55 ], [ %bExp.0.i.i, %BB46 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_BB55_59) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_BB56_bExp1ii = main_BB1_10_reg;
	end
end
always @(posedge clk) begin
	/* main: %BB56*/
	/*   %bExp.1.i.i = phi i32 [ %10, %BB55 ], [ %bExp.0.i.i, %BB46 ]*/
	if ((((cur_state == LEGUP_F_main_BB_BB46_50) & (memory_controller_waitrequest == 1'd0)) & (main_BB46_97 == 1'd1))) begin
		main_BB56_bExp1ii_reg <= main_BB56_bExp1ii;
		if (start == 1'b0 && ^(main_BB56_bExp1ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_BB56_bExp1ii_reg"); $finish; end
	end
	/* main: %BB56*/
	/*   %bExp.1.i.i = phi i32 [ %10, %BB55 ], [ %bExp.0.i.i, %BB46 ]*/
	if (((cur_state == LEGUP_F_main_BB_BB55_59) & (memory_controller_waitrequest == 1'd0))) begin
		main_BB56_bExp1ii_reg <= main_BB56_bExp1ii;
		if (start == 1'b0 && ^(main_BB56_bExp1ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_BB56_bExp1ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %BB56*/
	/*   %120 = sub i64 %119, %118*/
		main_BB56_120 = (main_BB56_119_reg - main_BB56_118_reg);
end
always @(*) begin
	/* main: %BB57*/
	/*   %121 = icmp eq i32 %8, 2047*/
		main_BB57_121 = (main_BB1_8_reg == 32'd2047);
end
always @(*) begin
	/* main: %BB58*/
	/*   %122 = icmp eq i64 %89, 0*/
		main_BB58_122 = (main_BB38_89_reg == 64'd0);
end
always @(*) begin
	/* main: %BB60*/
	/*   %123 = icmp eq i32 %10, 0*/
		main_BB60_123 = (main_BB1_10_reg == 32'd0);
end
always @(*) begin
	/* main: %BB60*/
	/*   %124 = or i64 %91, 4611686018427387904*/
		main_BB60_124 = (main_BB38_91_reg | 64'd4611686018427387904);
end
always @(*) begin
	/* main: %BB60*/
	/*   %125 = select i1 %123, i64 %91, i64 %124*/
		main_BB60_125 = (main_BB60_123 ? main_BB38_91_reg : main_BB60_124);
end
always @(posedge clk) begin
	/* main: %BB60*/
	/*   %125 = select i1 %123, i64 %91, i64 %124*/
	if ((cur_state == LEGUP_F_main_BB_BB60_64)) begin
		main_BB60_125_reg <= main_BB60_125;
		if (start == 1'b0 && ^(main_BB60_125) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_BB60_125_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %BB60*/
	/*   %126 = sext i1 %123 to i32*/
		main_BB60_126 = $signed(main_BB60_123);
end
always @(*) begin
	/* main: %BB60*/
	/*   %expDiff.1.i.i = add nsw i32 %126, %11*/
		main_BB60_expDiff1ii = (main_BB60_126 + main_BB1_11_reg);
end
always @(posedge clk) begin
	/* main: %BB60*/
	/*   %expDiff.1.i.i = add nsw i32 %126, %11*/
	if ((cur_state == LEGUP_F_main_BB_BB60_64)) begin
		main_BB60_expDiff1ii_reg <= main_BB60_expDiff1ii;
		if (start == 1'b0 && ^(main_BB60_expDiff1ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_BB60_expDiff1ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %BB60*/
	/*   %127 = icmp eq i32 %expDiff.1.i.i, 0*/
		main_BB60_127 = (main_BB60_expDiff1ii == 32'd0);
end
always @(*) begin
	/* main: %BB61*/
	/*   %128 = icmp slt i32 %expDiff.1.i.i, 64*/
		main_BB61_128 = ($signed(main_BB60_expDiff1ii_reg) < $signed(32'd64));
end
always @(*) begin
	/* main: %BB62*/
	/*   %129 = zext i32 %expDiff.1.i.i to i64*/
		main_BB62_129 = main_BB60_expDiff1ii_reg;
end
always @(*) begin
	/* main: %BB62*/
	/*   %130 = lshr i64 %125, %129*/
		main_BB62_130 = (main_BB60_125_reg >>> (main_BB62_129 % 64'd64));
end
always @(*) begin
	/* main: %BB62*/
	/*   %131 = sub nsw i32 0, %expDiff.1.i.i*/
		main_BB62_131 = (32'd0 - main_BB60_expDiff1ii_reg);
end
always @(*) begin
	/* main: %BB62*/
	/*   %132 = and i32 %131, 63*/
		main_BB62_132 = (main_BB62_131 & 32'd63);
end
always @(*) begin
	/* main: %BB62*/
	/*   %133 = zext i32 %132 to i64*/
		main_BB62_133 = main_BB62_132;
end
always @(*) begin
	/* main: %BB62*/
	/*   %134 = shl i64 %125, %133*/
		main_BB62_134 = (main_BB60_125_reg <<< (main_BB62_133 % 64'd64));
end
always @(*) begin
	/* main: %BB62*/
	/*   %135 = icmp ne i64 %134, 0*/
		main_BB62_135 = (main_BB62_134 != 64'd0);
end
always @(*) begin
	/* main: %BB62*/
	/*   %136 = zext i1 %135 to i64*/
		main_BB62_136 = main_BB62_135;
end
always @(*) begin
	/* main: %BB62*/
	/*   %137 = or i64 %136, %130*/
		main_BB62_137 = (main_BB62_136 | main_BB62_130);
end
always @(*) begin
	/* main: %BB63*/
	/*   %138 = icmp ne i64 %125, 0*/
		main_BB63_138 = (main_BB60_125_reg != 64'd0);
end
always @(*) begin
	/* main: %BB63*/
	/*   %139 = zext i1 %138 to i64*/
		main_BB63_139 = main_BB63_138;
end
always @(*) begin
	/* main: %BB64*/
	/*   %z.0.i.i.i = phi i64 [ %137, %BB62 ], [ %139, %BB63 ], [ %125, %BB60 ]*/
	if ((((cur_state == LEGUP_F_main_BB_BB60_64) & (memory_controller_waitrequest == 1'd0)) & (main_BB60_127 == 1'd1))) begin
		main_BB64_z0iii = main_BB60_125;
	end
	/* main: %BB64*/
	/*   %z.0.i.i.i = phi i64 [ %137, %BB62 ], [ %139, %BB63 ], [ %125, %BB60 ]*/
	else if (((cur_state == LEGUP_F_main_BB_BB62_66) & (memory_controller_waitrequest == 1'd0))) begin
		main_BB64_z0iii = main_BB62_137;
	end
	/* main: %BB64*/
	/*   %z.0.i.i.i = phi i64 [ %137, %BB62 ], [ %139, %BB63 ], [ %125, %BB60 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_BB63_67) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_BB64_z0iii = main_BB63_139;
	end
end
always @(posedge clk) begin
	/* main: %BB64*/
	/*   %z.0.i.i.i = phi i64 [ %137, %BB62 ], [ %139, %BB63 ], [ %125, %BB60 ]*/
	if ((((cur_state == LEGUP_F_main_BB_BB60_64) & (memory_controller_waitrequest == 1'd0)) & (main_BB60_127 == 1'd1))) begin
		main_BB64_z0iii_reg <= main_BB64_z0iii;
		if (start == 1'b0 && ^(main_BB64_z0iii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_BB64_z0iii_reg"); $finish; end
	end
	/* main: %BB64*/
	/*   %z.0.i.i.i = phi i64 [ %137, %BB62 ], [ %139, %BB63 ], [ %125, %BB60 ]*/
	if (((cur_state == LEGUP_F_main_BB_BB62_66) & (memory_controller_waitrequest == 1'd0))) begin
		main_BB64_z0iii_reg <= main_BB64_z0iii;
		if (start == 1'b0 && ^(main_BB64_z0iii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_BB64_z0iii_reg"); $finish; end
	end
	/* main: %BB64*/
	/*   %z.0.i.i.i = phi i64 [ %137, %BB62 ], [ %139, %BB63 ], [ %125, %BB60 ]*/
	if (((cur_state == LEGUP_F_main_BB_BB63_67) & (memory_controller_waitrequest == 1'd0))) begin
		main_BB64_z0iii_reg <= main_BB64_z0iii;
		if (start == 1'b0 && ^(main_BB64_z0iii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_BB64_z0iii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %BB64*/
	/*   %140 = or i64 %89, 4611686018427387904*/
		main_BB64_140 = (main_BB38_89_reg | 64'd4611686018427387904);
end
always @(*) begin
	/* main: %BB65*/
	/*   %141 = phi i64 [ %140, %BB64 ], [ %89, %BB45 ]*/
	if ((((cur_state == LEGUP_F_main_BB_BB45_49) & (memory_controller_waitrequest == 1'd0)) & (main_BB45_96 == 1'd1))) begin
		main_BB65_141 = main_BB38_89_reg;
	end
	/* main: %BB65*/
	/*   %141 = phi i64 [ %140, %BB64 ], [ %89, %BB45 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_BB64_68) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_BB65_141 = main_BB64_140;
	end
end
always @(posedge clk) begin
	/* main: %BB65*/
	/*   %141 = phi i64 [ %140, %BB64 ], [ %89, %BB45 ]*/
	if ((((cur_state == LEGUP_F_main_BB_BB45_49) & (memory_controller_waitrequest == 1'd0)) & (main_BB45_96 == 1'd1))) begin
		main_BB65_141_reg <= main_BB65_141;
		if (start == 1'b0 && ^(main_BB65_141) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_BB65_141_reg"); $finish; end
	end
	/* main: %BB65*/
	/*   %141 = phi i64 [ %140, %BB64 ], [ %89, %BB45 ]*/
	if (((cur_state == LEGUP_F_main_BB_BB64_68) & (memory_controller_waitrequest == 1'd0))) begin
		main_BB65_141_reg <= main_BB65_141;
		if (start == 1'b0 && ^(main_BB65_141) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_BB65_141_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %BB65*/
	/*   %142 = phi i64 [ %z.0.i.i.i, %BB64 ], [ %91, %BB45 ]*/
	if ((((cur_state == LEGUP_F_main_BB_BB45_49) & (memory_controller_waitrequest == 1'd0)) & (main_BB45_96 == 1'd1))) begin
		main_BB65_142 = main_BB38_91_reg;
	end
	/* main: %BB65*/
	/*   %142 = phi i64 [ %z.0.i.i.i, %BB64 ], [ %91, %BB45 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_BB64_68) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_BB65_142 = main_BB64_z0iii_reg;
	end
end
always @(posedge clk) begin
	/* main: %BB65*/
	/*   %142 = phi i64 [ %z.0.i.i.i, %BB64 ], [ %91, %BB45 ]*/
	if ((((cur_state == LEGUP_F_main_BB_BB45_49) & (memory_controller_waitrequest == 1'd0)) & (main_BB45_96 == 1'd1))) begin
		main_BB65_142_reg <= main_BB65_142;
		if (start == 1'b0 && ^(main_BB65_142) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_BB65_142_reg"); $finish; end
	end
	/* main: %BB65*/
	/*   %142 = phi i64 [ %z.0.i.i.i, %BB64 ], [ %91, %BB45 ]*/
	if (((cur_state == LEGUP_F_main_BB_BB64_68) & (memory_controller_waitrequest == 1'd0))) begin
		main_BB65_142_reg <= main_BB65_142;
		if (start == 1'b0 && ^(main_BB65_142) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_BB65_142_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %BB65*/
	/*   %aExp.1.i.i = phi i32 [ %8, %BB64 ], [ %aExp.0.i.i, %BB45 ]*/
	if ((((cur_state == LEGUP_F_main_BB_BB45_49) & (memory_controller_waitrequest == 1'd0)) & (main_BB45_96 == 1'd1))) begin
		main_BB65_aExp1ii = main_BB45_aExp0ii_reg;
	end
	/* main: %BB65*/
	/*   %aExp.1.i.i = phi i32 [ %8, %BB64 ], [ %aExp.0.i.i, %BB45 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_BB64_68) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_BB65_aExp1ii = main_BB1_8_reg;
	end
end
always @(posedge clk) begin
	/* main: %BB65*/
	/*   %aExp.1.i.i = phi i32 [ %8, %BB64 ], [ %aExp.0.i.i, %BB45 ]*/
	if ((((cur_state == LEGUP_F_main_BB_BB45_49) & (memory_controller_waitrequest == 1'd0)) & (main_BB45_96 == 1'd1))) begin
		main_BB65_aExp1ii_reg <= main_BB65_aExp1ii;
		if (start == 1'b0 && ^(main_BB65_aExp1ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_BB65_aExp1ii_reg"); $finish; end
	end
	/* main: %BB65*/
	/*   %aExp.1.i.i = phi i32 [ %8, %BB64 ], [ %aExp.0.i.i, %BB45 ]*/
	if (((cur_state == LEGUP_F_main_BB_BB64_68) & (memory_controller_waitrequest == 1'd0))) begin
		main_BB65_aExp1ii_reg <= main_BB65_aExp1ii;
		if (start == 1'b0 && ^(main_BB65_aExp1ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_BB65_aExp1ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %BB65*/
	/*   %143 = sub i64 %141, %142*/
		main_BB65_143 = (main_BB65_141_reg - main_BB65_142_reg);
end
always @(*) begin
	/* main: %BB66*/
	/*   %zExp.0.i.i = phi i32 [ %aExp.1.i.i, %BB65 ], [ %bExp.1.i.i, %BB56 ]*/
	if (((cur_state == LEGUP_F_main_BB_BB56_60) & (memory_controller_waitrequest == 1'd0))) begin
		main_BB66_zExp0ii = main_BB56_bExp1ii_reg;
	end
	/* main: %BB66*/
	/*   %zExp.0.i.i = phi i32 [ %aExp.1.i.i, %BB65 ], [ %bExp.1.i.i, %BB56 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_BB65_69) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_BB66_zExp0ii = main_BB65_aExp1ii_reg;
	end
end
always @(posedge clk) begin
	/* main: %BB66*/
	/*   %zExp.0.i.i = phi i32 [ %aExp.1.i.i, %BB65 ], [ %bExp.1.i.i, %BB56 ]*/
	if (((cur_state == LEGUP_F_main_BB_BB56_60) & (memory_controller_waitrequest == 1'd0))) begin
		main_BB66_zExp0ii_reg <= main_BB66_zExp0ii;
		if (start == 1'b0 && ^(main_BB66_zExp0ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_BB66_zExp0ii_reg"); $finish; end
	end
	/* main: %BB66*/
	/*   %zExp.0.i.i = phi i32 [ %aExp.1.i.i, %BB65 ], [ %bExp.1.i.i, %BB56 ]*/
	if (((cur_state == LEGUP_F_main_BB_BB65_69) & (memory_controller_waitrequest == 1'd0))) begin
		main_BB66_zExp0ii_reg <= main_BB66_zExp0ii;
		if (start == 1'b0 && ^(main_BB66_zExp0ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_BB66_zExp0ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %BB66*/
	/*   %zSig.0.i.i = phi i64 [ %143, %BB65 ], [ %120, %BB56 ]*/
	if (((cur_state == LEGUP_F_main_BB_BB56_60) & (memory_controller_waitrequest == 1'd0))) begin
		main_BB66_zSig0ii = main_BB56_120;
	end
	/* main: %BB66*/
	/*   %zSig.0.i.i = phi i64 [ %143, %BB65 ], [ %120, %BB56 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_BB65_69) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_BB66_zSig0ii = main_BB65_143;
	end
end
always @(posedge clk) begin
	/* main: %BB66*/
	/*   %zSig.0.i.i = phi i64 [ %143, %BB65 ], [ %120, %BB56 ]*/
	if (((cur_state == LEGUP_F_main_BB_BB56_60) & (memory_controller_waitrequest == 1'd0))) begin
		main_BB66_zSig0ii_reg <= main_BB66_zSig0ii;
		if (start == 1'b0 && ^(main_BB66_zSig0ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_BB66_zSig0ii_reg"); $finish; end
	end
	/* main: %BB66*/
	/*   %zSig.0.i.i = phi i64 [ %143, %BB65 ], [ %120, %BB56 ]*/
	if (((cur_state == LEGUP_F_main_BB_BB65_69) & (memory_controller_waitrequest == 1'd0))) begin
		main_BB66_zSig0ii_reg <= main_BB66_zSig0ii;
		if (start == 1'b0 && ^(main_BB66_zSig0ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_BB66_zSig0ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %BB66*/
	/*   %144 = add nsw i32 %zExp.0.i.i, -1*/
		main_BB66_144 = (main_BB66_zExp0ii_reg + -32'd1);
end
always @(posedge clk) begin
	/* main: %BB66*/
	/*   %144 = add nsw i32 %zExp.0.i.i, -1*/
	if ((cur_state == LEGUP_F_main_BB_BB66_70)) begin
		main_BB66_144_reg <= main_BB66_144;
		if (start == 1'b0 && ^(main_BB66_144) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_BB66_144_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %BB66*/
	/*   %145 = icmp ult i64 %zSig.0.i.i, 4294967296*/
		main_BB66_145 = (main_BB66_zSig0ii_reg < 64'd4294967296);
end
always @(posedge clk) begin
	/* main: %BB66*/
	/*   %145 = icmp ult i64 %zSig.0.i.i, 4294967296*/
	if ((cur_state == LEGUP_F_main_BB_BB66_70)) begin
		main_BB66_145_reg <= main_BB66_145;
		if (start == 1'b0 && ^(main_BB66_145) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_BB66_145_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %BB66*/
	/*   %146 = lshr i64 %zSig.0.i.i, 32*/
		main_BB66_146 = (main_BB66_zSig0ii_reg >>> (64'd32 % 64'd64));
end
always @(*) begin
	/* main: %BB66*/
	/*   %a.sink.i.i.i.i = select i1 %145, i64 %zSig.0.i.i, i64 %146*/
		main_BB66_asinkiiii = (main_BB66_145 ? main_BB66_zSig0ii_reg : main_BB66_146);
end
always @(*) begin
	/* main: %BB66*/
	/*   %extract.t.i.i.i.i = trunc i64 %a.sink.i.i.i.i to i32*/
		main_BB66_extracttiiii = main_BB66_asinkiiii[31:0];
end
always @(*) begin
	/* main: %BB66*/
	/*   %147 = icmp ult i32 %extract.t.i.i.i.i, 65536*/
		main_BB66_147 = (main_BB66_extracttiiii < 32'd65536);
end
always @(*) begin
	/* main: %BB66*/
	/*   %148 = shl i32 %extract.t.i.i.i.i, 16*/
		main_BB66_148 = (main_BB66_extracttiiii <<< (32'd16 % 32));
end
always @(*) begin
	/* main: %BB66*/
	/*   %.a.i.i.i.i.i = select i1 %147, i32 %148, i32 %extract.t.i.i.i.i*/
		main_BB66_aiiiii = (main_BB66_147 ? main_BB66_148 : main_BB66_extracttiiii);
end
always @(posedge clk) begin
	/* main: %BB66*/
	/*   %.a.i.i.i.i.i = select i1 %147, i32 %148, i32 %extract.t.i.i.i.i*/
	if ((cur_state == LEGUP_F_main_BB_BB66_70)) begin
		main_BB66_aiiiii_reg <= main_BB66_aiiiii;
		if (start == 1'b0 && ^(main_BB66_aiiiii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_BB66_aiiiii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %BB66*/
	/*   %..i.i.i.i.i = select i1 %147, i32 16, i32 0*/
		main_BB66_iiiii = (main_BB66_147 ? 32'd16 : 32'd0);
end
always @(posedge clk) begin
	/* main: %BB66*/
	/*   %..i.i.i.i.i = select i1 %147, i32 16, i32 0*/
	if ((cur_state == LEGUP_F_main_BB_BB66_70)) begin
		main_BB66_iiiii_reg <= main_BB66_iiiii;
		if (start == 1'b0 && ^(main_BB66_iiiii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_BB66_iiiii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %BB66*/
	/*   %149 = icmp ult i32 %.a.i.i.i.i.i, 16777216*/
		main_BB66_149 = (main_BB66_aiiiii < 32'd16777216);
end
always @(*) begin
	/* main: %BB67*/
	/*   %150 = or i32 %..i.i.i.i.i, 8*/
		main_BB67_150 = (main_BB66_iiiii_reg | 32'd8);
end
always @(*) begin
	/* main: %BB67*/
	/*   %151 = shl i32 %.a.i.i.i.i.i, 8*/
		main_BB67_151 = (main_BB66_aiiiii_reg <<< (32'd8 % 32));
end
always @(*) begin
	/* main: %BB68*/
	/*   %.1.i.i.i.i.i = phi i32 [ %151, %BB67 ], [ %.a.i.i.i.i.i, %BB66 ]*/
	if ((((cur_state == LEGUP_F_main_BB_BB66_70) & (memory_controller_waitrequest == 1'd0)) & (main_BB66_149 == 1'd0))) begin
		main_BB68_1iiiii = main_BB66_aiiiii;
	end
	/* main: %BB68*/
	/*   %.1.i.i.i.i.i = phi i32 [ %151, %BB67 ], [ %.a.i.i.i.i.i, %BB66 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_BB67_71) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_BB68_1iiiii = main_BB67_151;
	end
end
always @(posedge clk) begin
	/* main: %BB68*/
	/*   %.1.i.i.i.i.i = phi i32 [ %151, %BB67 ], [ %.a.i.i.i.i.i, %BB66 ]*/
	if ((((cur_state == LEGUP_F_main_BB_BB66_70) & (memory_controller_waitrequest == 1'd0)) & (main_BB66_149 == 1'd0))) begin
		main_BB68_1iiiii_reg <= main_BB68_1iiiii;
		if (start == 1'b0 && ^(main_BB68_1iiiii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_BB68_1iiiii_reg"); $finish; end
	end
	/* main: %BB68*/
	/*   %.1.i.i.i.i.i = phi i32 [ %151, %BB67 ], [ %.a.i.i.i.i.i, %BB66 ]*/
	if (((cur_state == LEGUP_F_main_BB_BB67_71) & (memory_controller_waitrequest == 1'd0))) begin
		main_BB68_1iiiii_reg <= main_BB68_1iiiii;
		if (start == 1'b0 && ^(main_BB68_1iiiii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_BB68_1iiiii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %BB68*/
	/*   %shiftCount.1.i.i.i.i.i = phi i32 [ %150, %BB67 ], [ %..i.i.i.i.i, %BB66 ]*/
	if ((((cur_state == LEGUP_F_main_BB_BB66_70) & (memory_controller_waitrequest == 1'd0)) & (main_BB66_149 == 1'd0))) begin
		main_BB68_shiftCount1iiiii = main_BB66_iiiii;
	end
	/* main: %BB68*/
	/*   %shiftCount.1.i.i.i.i.i = phi i32 [ %150, %BB67 ], [ %..i.i.i.i.i, %BB66 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_BB67_71) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_BB68_shiftCount1iiiii = main_BB67_150;
	end
end
always @(posedge clk) begin
	/* main: %BB68*/
	/*   %shiftCount.1.i.i.i.i.i = phi i32 [ %150, %BB67 ], [ %..i.i.i.i.i, %BB66 ]*/
	if ((((cur_state == LEGUP_F_main_BB_BB66_70) & (memory_controller_waitrequest == 1'd0)) & (main_BB66_149 == 1'd0))) begin
		main_BB68_shiftCount1iiiii_reg <= main_BB68_shiftCount1iiiii;
		if (start == 1'b0 && ^(main_BB68_shiftCount1iiiii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_BB68_shiftCount1iiiii_reg"); $finish; end
	end
	/* main: %BB68*/
	/*   %shiftCount.1.i.i.i.i.i = phi i32 [ %150, %BB67 ], [ %..i.i.i.i.i, %BB66 ]*/
	if (((cur_state == LEGUP_F_main_BB_BB67_71) & (memory_controller_waitrequest == 1'd0))) begin
		main_BB68_shiftCount1iiiii_reg <= main_BB68_shiftCount1iiiii;
		if (start == 1'b0 && ^(main_BB68_shiftCount1iiiii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_BB68_shiftCount1iiiii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %BB68*/
	/*   %152 = lshr i32 %.1.i.i.i.i.i, 24*/
		main_BB68_152 = (main_BB68_1iiiii_reg >>> (32'd24 % 32));
end
always @(*) begin
	/* main: %BB68*/
	/*   %153 = getelementptr inbounds [256 x i32]* @countLeadingZeros32.countLeadingZerosHigh, i32 0, i32 %152*/
		main_BB68_153 = (`TAG_g_countLeadingZeros32countLeadingZerosHigh_a | (4 * main_BB68_152));
end
always @(*) begin
	/* main: %BB68*/
	/*   %154 = load i32* %153, align 4, !tbaa !5*/
		main_BB68_154 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %BB68*/
	/*   %155 = select i1 %145, i32 31, i32 -1*/
		main_BB68_155 = (main_BB66_145_reg ? 32'd31 : -32'd1);
end
always @(*) begin
	/* main: %BB68*/
	/*   %156 = add nsw i32 %shiftCount.1.i.i.i.i.i, %155*/
		main_BB68_156 = (main_BB68_shiftCount1iiiii_reg + main_BB68_155);
end
always @(posedge clk) begin
	/* main: %BB68*/
	/*   %156 = add nsw i32 %shiftCount.1.i.i.i.i.i, %155*/
	if ((cur_state == LEGUP_F_main_BB_BB68_72)) begin
		main_BB68_156_reg <= main_BB68_156;
		if (start == 1'b0 && ^(main_BB68_156) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_BB68_156_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %BB68*/
	/*   %157 = add i32 %156, %154*/
		main_BB68_157 = (main_BB68_156_reg + main_BB68_154);
end
always @(*) begin
	/* main: %BB68*/
	/*   %158 = sub i32 %144, %157*/
		main_BB68_158 = (main_BB66_144_reg - main_BB68_157);
end
always @(posedge clk) begin
	/* main: %BB68*/
	/*   %158 = sub i32 %144, %157*/
	if ((cur_state == LEGUP_F_main_BB_BB68_74)) begin
		main_BB68_158_reg <= main_BB68_158;
		if (start == 1'b0 && ^(main_BB68_158) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_BB68_158_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %BB68*/
	/*   %159 = zext i32 %157 to i64*/
		main_BB68_159 = main_BB68_157;
end
always @(*) begin
	/* main: %BB68*/
	/*   %160 = shl i64 %zSig.0.i.i, %159*/
		main_BB68_160 = (main_BB66_zSig0ii_reg <<< (main_BB68_159 % 64'd64));
end
always @(posedge clk) begin
	/* main: %BB68*/
	/*   %160 = shl i64 %zSig.0.i.i, %159*/
	if ((cur_state == LEGUP_F_main_BB_BB68_74)) begin
		main_BB68_160_reg <= main_BB68_160;
		if (start == 1'b0 && ^(main_BB68_160) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_BB68_160_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %BB68*/
	/*   %161 = and i32 %158, 65535*/
		main_BB68_161 = (main_BB68_158 & 32'd65535);
end
always @(*) begin
	/* main: %BB68*/
	/*   %162 = icmp ugt i32 %161, 2044*/
		main_BB68_162 = (main_BB68_161 > 32'd2044);
end
always @(*) begin
	/* main: %BB69*/
	/*   %163 = icmp sgt i32 %158, 2045*/
		main_BB69_163 = ($signed(main_BB68_158_reg) > $signed(32'd2045));
end
always @(*) begin
	/* main: %BB70*/
	/*   %164 = icmp eq i32 %158, 2045*/
		main_BB70_164 = (main_BB68_158_reg == 32'd2045);
end
always @(*) begin
	/* main: %BB71*/
	/*   %165 = add i64 %160, 512*/
		main_BB71_165 = (main_BB68_160_reg + 64'd512);
end
always @(*) begin
	/* main: %BB71*/
	/*   %166 = icmp slt i64 %165, 0*/
		main_BB71_166 = ($signed(main_BB71_165) < $signed(64'd0));
end
always @(*) begin
	/* main: %BB73*/
	/*   %167 = icmp slt i32 %158, 0*/
		main_BB73_167 = ($signed(main_BB68_158_reg) < $signed(32'd0));
end
always @(*) begin
	/* main: %BB74*/
	/*   %168 = icmp sgt i32 %158, -64*/
		main_BB74_168 = ($signed(main_BB68_158_reg) > $signed(-32'd64));
end
always @(*) begin
	/* main: %BB75*/
	/*   %169 = sub nsw i32 0, %158*/
		main_BB75_169 = (32'd0 - main_BB68_158_reg);
end
always @(*) begin
	/* main: %BB75*/
	/*   %170 = zext i32 %169 to i64*/
		main_BB75_170 = main_BB75_169;
end
always @(*) begin
	/* main: %BB75*/
	/*   %171 = lshr i64 %160, %170*/
		main_BB75_171 = (main_BB68_160_reg >>> (main_BB75_170 % 64'd64));
end
always @(*) begin
	/* main: %BB75*/
	/*   %172 = and i32 %158, 63*/
		main_BB75_172 = (main_BB68_158_reg & 32'd63);
end
always @(*) begin
	/* main: %BB75*/
	/*   %173 = zext i32 %172 to i64*/
		main_BB75_173 = main_BB75_172;
end
always @(*) begin
	/* main: %BB75*/
	/*   %174 = shl i64 %160, %173*/
		main_BB75_174 = (main_BB68_160_reg <<< (main_BB75_173 % 64'd64));
end
always @(*) begin
	/* main: %BB75*/
	/*   %175 = icmp ne i64 %174, 0*/
		main_BB75_175 = (main_BB75_174 != 64'd0);
end
always @(*) begin
	/* main: %BB75*/
	/*   %176 = zext i1 %175 to i64*/
		main_BB75_176 = main_BB75_175;
end
always @(*) begin
	/* main: %BB75*/
	/*   %177 = or i64 %176, %171*/
		main_BB75_177 = (main_BB75_176 | main_BB75_171);
end
always @(*) begin
	/* main: %BB76*/
	/*   %178 = icmp ne i64 %160, 0*/
		main_BB76_178 = (main_BB68_160_reg != 64'd0);
end
always @(*) begin
	/* main: %BB76*/
	/*   %179 = zext i1 %178 to i64*/
		main_BB76_179 = main_BB76_178;
end
always @(*) begin
	/* main: %BB77*/
	/*   %z.0.i.i.i.i.i = phi i64 [ %177, %BB75 ], [ %179, %BB76 ]*/
	if (((cur_state == LEGUP_F_main_BB_BB75_81) & (memory_controller_waitrequest == 1'd0))) begin
		main_BB77_z0iiiii = main_BB75_177;
	end
	/* main: %BB77*/
	/*   %z.0.i.i.i.i.i = phi i64 [ %177, %BB75 ], [ %179, %BB76 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_BB76_82) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_BB77_z0iiiii = main_BB76_179;
	end
end
always @(posedge clk) begin
	/* main: %BB77*/
	/*   %z.0.i.i.i.i.i = phi i64 [ %177, %BB75 ], [ %179, %BB76 ]*/
	if (((cur_state == LEGUP_F_main_BB_BB75_81) & (memory_controller_waitrequest == 1'd0))) begin
		main_BB77_z0iiiii_reg <= main_BB77_z0iiiii;
		if (start == 1'b0 && ^(main_BB77_z0iiiii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_BB77_z0iiiii_reg"); $finish; end
	end
	/* main: %BB77*/
	/*   %z.0.i.i.i.i.i = phi i64 [ %177, %BB75 ], [ %179, %BB76 ]*/
	if (((cur_state == LEGUP_F_main_BB_BB76_82) & (memory_controller_waitrequest == 1'd0))) begin
		main_BB77_z0iiiii_reg <= main_BB77_z0iiiii;
		if (start == 1'b0 && ^(main_BB77_z0iiiii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_BB77_z0iiiii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %BB77*/
	/*   %.tr3.i.i.i.i = trunc i64 %z.0.i.i.i.i.i to i32*/
		main_BB77_tr3iiii = main_BB77_z0iiiii_reg[31:0];
end
always @(*) begin
	/* main: %BB77*/
	/*   %180 = and i32 %.tr3.i.i.i.i, 1023*/
		main_BB77_180 = (main_BB77_tr3iiii & 32'd1023);
end
always @(*) begin
	/* main: %BB77*/
	/*   %181 = icmp eq i32 %180, 0*/
		main_BB77_181 = (main_BB77_180 == 32'd0);
end
always @(*) begin
	/* main: %BB81*/
	/*   %182 = add nsw i32 %i.01, 1*/
		main_BB81_182 = (main_BB1_i01_reg + 32'd1);
end
always @(*) begin
	/* main: %BB81*/
	/*   %exitcond1 = icmp eq i32 %182, 46*/
		main_BB81_exitcond1 = (main_BB81_182 == 32'd46);
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* main: %BB82*/
	/*   ret i32 undef*/
	if ((cur_state == LEGUP_F_main_BB_BB82_88)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_a = 1'd0;
	end
	/* main: %BB1*/
	/*   %0 = load i64* %scevgep3, align 8, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_BB1_1)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %BB68*/
	/*   %154 = load i32* %153, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_BB68_72)) begin
		memory_controller_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_a = 1'd0;
	end
	/* main: %BB1*/
	/*   %0 = load i64* %scevgep3, align 8, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_BB1_1)) begin
		memory_controller_address_a = main_BB1_scevgep3;
	end
	/* main: %BB68*/
	/*   %154 = load i32* %153, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_BB68_72)) begin
		memory_controller_address_a = main_BB68_153;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %BB1*/
	/*   %0 = load i64* %scevgep3, align 8, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_BB1_1)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %BB68*/
	/*   %154 = load i32* %153, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_BB68_72)) begin
		memory_controller_write_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_a = 1'd0;
	end
	/* main: %BB1*/
	/*   %0 = load i64* %scevgep3, align 8, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_BB1_1)) begin
		memory_controller_size_a = 2'd3;
	end
	/* main: %BB68*/
	/*   %154 = load i32* %153, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_BB68_72)) begin
		memory_controller_size_a = 2'd2;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_b = 1'd0;
	end
	/* main: %BB1*/
	/*   %1 = load i64* %scevgep2, align 8, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_BB1_1)) begin
		memory_controller_enable_b = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_b = 1'd0;
	end
	/* main: %BB1*/
	/*   %1 = load i64* %scevgep2, align 8, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_BB1_1)) begin
		memory_controller_address_b = main_BB1_scevgep2;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %BB1*/
	/*   %1 = load i64* %scevgep2, align 8, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_BB1_1)) begin
		memory_controller_write_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_b = 1'd0;
	end
	/* main: %BB1*/
	/*   %1 = load i64* %scevgep2, align 8, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_BB1_1)) begin
		memory_controller_size_b = 2'd3;
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		return_val <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
	/* main: %BB82*/
	/*   ret i32 undef*/
	if ((cur_state == LEGUP_F_main_BB_BB82_88)) begin
		return_val <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
end

endmodule 
module ram_dual_port
(
	clk,
	clken,
	address_a,
	address_b,
	wren_a,
	wren_b,
	data_a,
	data_b,
	byteena_a,
	byteena_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  width_be_a = 1'd0;
parameter  width_be_b = 1'd0;
parameter  latency = 1;

input  clk;
input  clken;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;
input  wren_a;
input  wren_b;
input [(width_a-1):0] data_a;
input [(width_b-1):0] data_b;
// byte enable is unsupported by inferred RAMs
input [width_be_a-1:0] byteena_a;
input [width_be_b-1:0] byteena_b;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
if (clken)
begin // Port A
if (wren_a)
begin
    ram[address_a] <= data_a;
    q_a_wire <= {width_a{1'bX}};
end
else
    q_a_wire <= ram[address_a];
if (wren_b)
begin
    ram[address_b] <= data_b;
    q_b_wire <= {width_b{1'bX}};
end
else
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
if (clken)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = (clken) ? q_a_reg[latency] : 0;
assign q_b = (clken) ? q_b_reg[latency] : 0;


endmodule
module rom_dual_port
(
	clk,
	clken,
	address_a,
	address_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  latency = 1;

input  clk;
input  clken;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
if (clken)
begin
    q_a_wire <= ram[address_a];
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
if (clken)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = (clken) ? q_a_reg[latency] : 0;
assign q_b = (clken) ? q_b_reg[latency] : 0;


endmodule
// Adding code from verilog file: /home/vagrant/legup-4.0/boards/StratixIV/DE4/top.v


module de4 ( 
    	     OSC_50_BANK2, 
             BUTTON, 
             LED, 
    	     SEG0_D, 
    	     SEG1_D 
	     ); 
   input OSC_50_BANK2; 
   input [1:0] BUTTON; 
   output [6:0] SEG0_D; 
   output [6:0] SEG1_D; 
   output [7:0] LED; 
   
   de2 de2_inst ( 
		  .CLOCK_50 (OSC_50_BANK2), 
		  .LEDG (LED), 
		  .KEY (BUTTON), 
		  .SW (), 
		  .HEX0 (SEG0_D), 
		  .HEX1 (SEG1_D), 
		  .HEX2 (), 
		  .HEX3 (), 
		  .HEX4 (), 
		  .HEX5 (), 
		  .HEX6 (), 
		  .HEX7 () 
		  ); 
   
endmodule
// Adding code from verilog file: /home/vagrant/legup-4.0/boards/Virtex6/ML605/top.v


module ML605 (
       USER_CLOCK,
	    KEY,
	    SW,	    
       LED,
       LEDG,
		UART_RXD,
		UART_TXD

	    );

   input USER_CLOCK;
   input [4:0] KEY;
   input [7:0] SW;
   output [7:0] LED;
   output [7:0] LEDG;
   wire CLOCK_50;

    input UART_RXD;
    output UART_TXD;    
	wire clk = CLOCK_50;
	wire go = ~KEY[1];



   wire 	reset = ~KEY[0];
   wire 	start;
   wire [31:0] 	return_val;
   reg  [31:0] 	return_val_reg;
   wire 	finish;
   wire [3:0]	state;
   
   reg [6:0]   hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;

   assign CLOCK_50 = USER_CLOCK;
   assign LED = 0;
   
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end
assign UART_TXD = 1'b0;

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);

   
   top top_inst (
      .clk (clk),
      .reset (reset),
      .finish (finish),
      .return_val (return_val),
        .start (start)

    );

   

endmodule

// Adding code from verilog file: /home/vagrant/legup-4.0/boards/CycloneII/DE2/top.v


module de2 (
	    CLOCK_50,
	    KEY,
	    SW,
	    HEX0,
	    HEX1,
	    HEX2,
	    HEX3,
	    HEX4,
	    HEX5,
	    HEX6,
	    HEX7,
	    LEDG,
		UART_RXD,
		UART_TXD

	    );

   input CLOCK_50;
   input [3:0] KEY;
   input [17:0] SW;
   output [6:0] HEX0, HEX1,  HEX2,  HEX3,  HEX4,  HEX5,  HEX6,  HEX7;
   reg [6:0] 	hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;
   

   output [7:0] LEDG;
    input UART_RXD;
    output UART_TXD;    
	wire clk = CLOCK_50;
	wire go = ~KEY[1];



   wire 	reset = ~KEY[0];
   wire 	start;
   wire [31:0] 	return_val;
   reg  [31:0] 	return_val_reg;
   wire 	finish;
   wire [3:0]	state;

   hex_digits h7( .x(hex7), .hex_LEDs(HEX7));
   hex_digits h6( .x(hex6), .hex_LEDs(HEX6));
   hex_digits h5( .x(hex5), .hex_LEDs(HEX5));
   hex_digits h4( .x(hex4), .hex_LEDs(HEX4));
   hex_digits h3( .x(hex3), .hex_LEDs(HEX3));
   hex_digits h2( .x(hex2), .hex_LEDs(HEX2));
   hex_digits h1( .x(hex1), .hex_LEDs(HEX1));
   hex_digits h0( .x(hex0), .hex_LEDs(HEX0));
   
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end
assign UART_TXD = 1'b0;

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);

   
   top top_inst (
      .clk (clk),
      .reset (reset),
      .finish (finish),
      .return_val (return_val),
        .start (start)

    );

endmodule

module circuit_start_control (
    go,
    control_key
);
    input control_key;
    output go;
    assign go = control_key;
endmodule
module hex_digits(x, hex_LEDs);
    input [3:0] x;
    output [6:0] hex_LEDs;
    
    assign hex_LEDs[0] = (~x[3] & ~x[2] & ~x[1] & x[0]) |
                            (~x[3] & x[2] & ~x[1] & ~x[0]) |
                            (x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & ~x[2] & x[1] & x[0]);
    assign hex_LEDs[1] = (~x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & x[1] & x[0]) |
                            (x[3] & x[2] & ~x[0]) |
                            (x[2] & x[1] & ~x[0]);
    assign hex_LEDs[2] = (x[3] & x[2] & ~x[0]) |
                            (x[3] & x[2] & x[1]) |
                            (~x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[3] = (~x[3] & ~x[2] & ~x[1] & x[0]) | 
                            (~x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (x[2] & x[1] & x[0]) | 
                            (x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[4] = (~x[3] & x[0]) |
                            (~x[3] & x[2] & ~x[1]) |
                            (~x[2] & ~x[1] & x[0]);
    assign hex_LEDs[5] = (~x[3] & ~x[2] & x[0]) | 
                            (~x[3] & ~x[2] & x[1]) | 
                            (~x[3] & x[1] & x[0]) | 
                            (x[3] & x[2] & ~x[1] & x[0]);
    assign hex_LEDs[6] = (~x[3] & ~x[2] & ~x[1]) | 
                            (x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (~x[3] & x[2] & x[1] & x[0]);
    
endmodule
`timescale 1 ns / 1 ns
module main_tb
(
);

reg  clk;
reg  reset;
reg  start;
reg  waitrequest;
wire [31:0] return_val;
wire  finish;


top top_inst (
	.clk (clk),
	.reset (reset),
	.start (start),
	.waitrequest (waitrequest),
	.finish (finish),
	.return_val (return_val)
);




initial 
    clk = 0;
always @(clk)
    clk <= #10 ~clk;

initial begin
//$monitor("At t=%t clk=%b %b %b %b %d", $time, clk, reset, start, finish, return_val);
@(negedge clk);
reset <= 1;
@(negedge clk);
reset <= 0;
start <= 1;
@(negedge clk);
start <= 0;
end

always@(finish) begin
    if (finish == 1) begin
        $display("At t=%t clk=%b finish=%b return_val=%d", $time, clk, finish, return_val);
        $display("Cycles: %d", ($time-50)/20);
        $finish;
    end
end

initial begin
waitrequest <= 1;
@(negedge clk);
@(negedge clk);
waitrequest <= 0;
end


endmodule 
